# 1 "v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp"
# 1 "v:\\GigglingBits\\box2d\\HeyBox2D\\build_heybox2d_vc11//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "v:/GigglingBits/box2d/HeyBox2D/build_heybox2d_vc11/temp_defines_debug.h" 1
# 1 "<command-line>" 2
# 1 "v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp"
# 19 "v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp"
# 1 "v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.h" 1
# 22 "v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.h"
# 1 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 1
# 22 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h"
# 1 "c:/marmalade/6.3/s3e/h/std/stddef.h" 1
# 15 "c:/marmalade/6.3/s3e/h/std/stddef.h"
typedef signed int ptrdiff_t;


    typedef unsigned int wint_t;
    typedef unsigned long int wctype_t;







typedef unsigned int size_t;
# 23 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/assert.h" 1
# 15 "c:/marmalade/6.3/s3e/h/std/assert.h"
# 1 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 1
# 15 "c:/marmalade/6.3/s3e/h/std/sys/types.h"
# 1 "c:/marmalade/6.3/s3e/h/s3eTypes.h" 1
# 35 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef unsigned char s3e_uint8_t;
typedef signed char s3e_int8_t;
typedef unsigned short int s3e_uint16_t;
typedef signed short int s3e_int16_t;
typedef unsigned int s3e_uint32_t;
typedef signed int s3e_int32_t;
# 49 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
  typedef signed long long s3e_int64_t;
  typedef unsigned long long s3e_uint64_t;
# 72 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef s3e_uint64_t uint64_t;
typedef s3e_int64_t int64_t;
typedef s3e_uint32_t uint32_t;
typedef s3e_int32_t int32_t;
typedef s3e_uint16_t uint16_t;
typedef s3e_int16_t int16_t;
typedef s3e_uint8_t uint8_t;
typedef s3e_int8_t int8_t;
# 94 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
    typedef int intptr_t;
    typedef unsigned int uintptr_t;
# 106 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef unsigned int uint;
typedef unsigned short int ushort;
typedef unsigned long int ulong;
typedef unsigned char uint8;
typedef signed char int8;







typedef int64_t int64;
typedef uint64_t uint64;





typedef unsigned int uint32;






typedef signed int int32;






typedef uint16_t uint16;




typedef int16_t int16;
# 224 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef enum s3eResult
{
    S3E_RESULT_SUCCESS = 0,
    S3E_RESULT_ERROR = 1
} s3eResult;




typedef uint8 s3eBool;
# 242 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef wchar_t s3eWChar;
# 254 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef int32 (*s3eCallback) (void* systemData, void* userData);
# 16 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 2

# 1 "c:/marmalade/6.3/s3e/h/std/stdint.h" 1
# 19 "c:/marmalade/6.3/s3e/h/std/stdint.h"
typedef signed char int_least8_t;
typedef short int_least16_t;
typedef long int_least32_t;
typedef int64_t int_least64_t;

typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned long uint_least32_t;
typedef uint64_t uint_least64_t;

typedef signed char int_fast8_t;
typedef short int_fast16_t;
typedef long int_fast32_t;
typedef int64_t int_fast64_t;

typedef unsigned char uint_fast8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned long uint_fast32_t;
typedef uint64_t uint_fast64_t;

typedef int64_t intmax_t;
typedef uint64_t uintmax_t;
# 18 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/sys/select.h" 1
# 24 "c:/marmalade/6.3/s3e/h/std/sys/select.h"
struct timeval;

typedef struct fd_set
{
    char fds_bits[256/8];
} fd_set;
# 39 "c:/marmalade/6.3/s3e/h/std/sys/select.h"
extern "C" {

int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);

}
# 19 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 2



typedef long off_t;

typedef int64_t off64_t;


namespace std
{
typedef ::size_t size_t;
}


typedef uint u_int;
typedef uint8_t u_int8_t;
typedef uint16_t u_int16_t;
typedef uint32_t u_int32_t;
typedef uint64_t u_int64_t;

typedef unsigned short u_short;
typedef unsigned long u_long;
typedef unsigned char u_char;

typedef int ssize_t;
typedef int pid_t;
typedef short uid_t;
typedef short gid_t;
typedef int idtype_t;
typedef int id_t;
typedef uint32 mode_t;
typedef short dev_t;
typedef short ino_t;
typedef int key_t;
typedef void* caddr_t;
# 16 "c:/marmalade/6.3/s3e/h/std/assert.h" 2

extern "C" {
# 33 "c:/marmalade/6.3/s3e/h/std/assert.h"
        void __assert(const char* file, int line, const char* expr);
# 43 "c:/marmalade/6.3/s3e/h/std/assert.h"
}
# 24 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/float.h" 1
# 31 "c:/marmalade/6.3/s3e/h/std/float.h"
  extern "C" {
# 109 "c:/marmalade/6.3/s3e/h/std/float.h"
extern "C" {

unsigned _controlfp(unsigned, unsigned);
unsigned _clearfp(void);
unsigned _statusfp(void);

}
# 150 "c:/marmalade/6.3/s3e/h/std/float.h"
    }
# 25 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 2




typedef signed char int8;
typedef signed short int16;
typedef signed int int32;
typedef unsigned char uint8;
typedef unsigned short uint16;
typedef unsigned int uint32;
typedef float float32;
typedef double float64;
# 131 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h"
void* b2Alloc(int32 size);


void b2Free(void* mem);


void b2Log(const char* string, ...);



struct b2Version
{
 int32 major;
 int32 minor;
 int32 revision;
};


extern b2Version b2_version;
# 23 "v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.h" 2

const int32 b2_chunkSize = 16 * 1024;
const int32 b2_maxBlockSize = 640;
const int32 b2_blockSizes = 14;
const int32 b2_chunkArrayIncrement = 128;

struct b2Block;
struct b2Chunk;




class b2BlockAllocator
{
public:
 b2BlockAllocator();
 ~b2BlockAllocator();


 void* Allocate(int32 size);


 void Free(void* p, int32 size);

 void Clear();

private:

 b2Chunk* m_chunks;
 int32 m_chunkCount;
 int32 m_chunkSpace;

 b2Block* m_freeLists[b2_blockSizes];

 static int32 s_blockSizes[b2_blockSizes];
 static uint8 s_blockSizeLookup[b2_maxBlockSize + 1];
 static bool s_blockSizeLookupInitialized;
};
# 20 "v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp" 2
# 1 "c:/marmalade/6.3/s3e/h/std/limits.h" 1
# 21 "v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp" 2
# 1 "c:/marmalade/6.3/s3e/h/std/memory.h" 1
# 15 "c:/marmalade/6.3/s3e/h/std/memory.h"
# 1 "c:/marmalade/6.3/s3e/h/std/string.h" 1
# 17 "c:/marmalade/6.3/s3e/h/std/string.h"
extern "C" {

void *memcpy(void *dest, const void *src, size_t n);
void *memset(void *s, int c, size_t n);
int memcmp(const void *s1, const void *s2, size_t n);
void *memmove(void *dest, const void *src, size_t n);
void *memchr(const void *s, int c, size_t n);
void *memrchr(const void *s, int c, size_t n);
# 34 "c:/marmalade/6.3/s3e/h/std/string.h"
int strcmp(const char *s1, const char *s2);
int strncmp(const char *s1, const char *s2, size_t n);
char *strsep(char **stringp, const char *delim);
char *strcpy(char *dest, const char *src);
char *strncpy(char *dest, const char *src, size_t n);
char *strchr(const char *s, int c);
char *strstr(const char *haystack, const char *needle);
char *strrchr(const char *s, int c);
char *strdup(const char *s);
char *strtok(char *str, const char *delim);
char *strtok_r(char *str, const char *delim, char **saveptr);
char *strcat(char *dest, const char *src);
char *strncat(char *dest, const char *src, size_t n);
size_t strlen(const char *s);
size_t strnlen(const char *s, size_t n);
int strcasecmp(const char *s1, const char *s2);
int strncasecmp(const char *s1, const char *s2, size_t n);
size_t strspn(const char *s, const char *accept);
size_t strcspn(const char *s, const char *reject);
char *strpbrk(const char *s, const char *accept);
int strcoll(const char *s1, const char *s2);
char *strerror(int errnum);
size_t strxfrm(char *dest, const char *src, size_t n);

int strerror_r(int errnum, char *buf, size_t buflen);





size_t strlcpy(char* dest, const char* src, size_t len);
size_t strlcat(char* dest, const char* src, size_t len);

char* strnstr(const char *s, const char *find, size_t slen);

}
# 16 "c:/marmalade/6.3/s3e/h/std/memory.h" 2
# 22 "v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp" 2


int32 b2BlockAllocator::s_blockSizes[b2_blockSizes] =
{
 16,
 32,
 64,
 96,
 128,
 160,
 192,
 224,
 256,
 320,
 384,
 448,
 512,
 640,
};
uint8 b2BlockAllocator::s_blockSizeLookup[b2_maxBlockSize + 1];
bool b2BlockAllocator::s_blockSizeLookupInitialized;

struct b2Chunk
{
 int32 blockSize;
 b2Block* blocks;
};

struct b2Block
{
 b2Block* next;
};

b2BlockAllocator::b2BlockAllocator()
{
 ((b2_blockSizes < 255) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp", 57, "b2_blockSizes < 255"));

 m_chunkSpace = b2_chunkArrayIncrement;
 m_chunkCount = 0;
 m_chunks = (b2Chunk*)b2Alloc(m_chunkSpace * sizeof(b2Chunk));

 memset(m_chunks, 0, m_chunkSpace * sizeof(b2Chunk));
 memset(m_freeLists, 0, sizeof(m_freeLists));

 if (s_blockSizeLookupInitialized == false)
 {
  int32 j = 0;
  for (int32 i = 1; i <= b2_maxBlockSize; ++i)
  {
   ((j < b2_blockSizes) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp", 71, "j < b2_blockSizes"));
   if (i <= s_blockSizes[j])
   {
    s_blockSizeLookup[i] = (uint8)j;
   }
   else
   {
    ++j;
    s_blockSizeLookup[i] = (uint8)j;
   }
  }

  s_blockSizeLookupInitialized = true;
 }
}

b2BlockAllocator::~b2BlockAllocator()
{
 for (int32 i = 0; i < m_chunkCount; ++i)
 {
  b2Free(m_chunks[i].blocks);
 }

 b2Free(m_chunks);
}

void* b2BlockAllocator::Allocate(int32 size)
{
 if (size == 0)
  return __null;

 ((0 < size) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp", 102, "0 < size"));

 if (size > b2_maxBlockSize)
 {
  return b2Alloc(size);
 }

 int32 index = s_blockSizeLookup[size];
 ((0 <= index && index < b2_blockSizes) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp", 110, "0 <= index && index < b2_blockSizes"));

 if (m_freeLists[index])
 {
  b2Block* block = m_freeLists[index];
  m_freeLists[index] = block->next;
  return block;
 }
 else
 {
  if (m_chunkCount == m_chunkSpace)
  {
   b2Chunk* oldChunks = m_chunks;
   m_chunkSpace += b2_chunkArrayIncrement;
   m_chunks = (b2Chunk*)b2Alloc(m_chunkSpace * sizeof(b2Chunk));
   memcpy(m_chunks, oldChunks, m_chunkCount * sizeof(b2Chunk));
   memset(m_chunks + m_chunkCount, 0, b2_chunkArrayIncrement * sizeof(b2Chunk));
   b2Free(oldChunks);
  }

  b2Chunk* chunk = m_chunks + m_chunkCount;
  chunk->blocks = (b2Block*)b2Alloc(b2_chunkSize);



  int32 blockSize = s_blockSizes[index];
  chunk->blockSize = blockSize;
  int32 blockCount = b2_chunkSize / blockSize;
  ((blockCount * blockSize <= b2_chunkSize) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp", 138, "blockCount * blockSize <= b2_chunkSize"));
  for (int32 i = 0; i < blockCount - 1; ++i)
  {
   b2Block* block = (b2Block*)((int8*)chunk->blocks + blockSize * i);
   b2Block* next = (b2Block*)((int8*)chunk->blocks + blockSize * (i + 1));
   block->next = next;
  }
  b2Block* last = (b2Block*)((int8*)chunk->blocks + blockSize * (blockCount - 1));
  last->next = __null;

  m_freeLists[index] = chunk->blocks->next;
  ++m_chunkCount;

  return chunk->blocks;
 }
}

void b2BlockAllocator::Free(void* p, int32 size)
{
 if (size == 0)
 {
  return;
 }

 ((0 < size) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp", 162, "0 < size"));

 if (size > b2_maxBlockSize)
 {
  b2Free(p);
  return;
 }

 int32 index = s_blockSizeLookup[size];
 ((0 <= index && index < b2_blockSizes) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp", 171, "0 <= index && index < b2_blockSizes"));
# 199 "v:/gigglingbits/box2d/Box2D/Common/b2BlockAllocator.cpp"
 b2Block* block = (b2Block*)p;
 block->next = m_freeLists[index];
 m_freeLists[index] = block;
}

void b2BlockAllocator::Clear()
{
 for (int32 i = 0; i < m_chunkCount; ++i)
 {
  b2Free(m_chunks[i].blocks);
 }

 m_chunkCount = 0;
 memset(m_chunks, 0, m_chunkSpace * sizeof(b2Chunk));

 memset(m_freeLists, 0, sizeof(m_freeLists));
}
