# 1 "v:/gigglingbits/box2d/Box2D/Rope/b2Rope.cpp"
# 1 "v:\\GigglingBits\\box2d\\HeyBox2D\\build_heybox2d_vc11//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "v:/GigglingBits/box2d/HeyBox2D/build_heybox2d_vc11/temp_defines_debug.h" 1
# 1 "<command-line>" 2
# 1 "v:/gigglingbits/box2d/Box2D/Rope/b2Rope.cpp"
# 19 "v:/gigglingbits/box2d/Box2D/Rope/b2Rope.cpp"
# 1 "v:/gigglingbits/box2d/Box2D/Rope/b2Rope.h" 1
# 22 "v:/gigglingbits/box2d/Box2D/Rope/b2Rope.h"
# 1 "v:/gigglingbits/box2d/Box2D/Common/b2Math.h" 1
# 22 "v:/gigglingbits/box2d/Box2D/Common/b2Math.h"
# 1 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 1
# 22 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h"
# 1 "c:/marmalade/6.3/s3e/h/std/stddef.h" 1
# 15 "c:/marmalade/6.3/s3e/h/std/stddef.h"
typedef signed int ptrdiff_t;


    typedef unsigned int wint_t;
    typedef unsigned long int wctype_t;







typedef unsigned int size_t;
# 23 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/assert.h" 1
# 15 "c:/marmalade/6.3/s3e/h/std/assert.h"
# 1 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 1
# 15 "c:/marmalade/6.3/s3e/h/std/sys/types.h"
# 1 "c:/marmalade/6.3/s3e/h/s3eTypes.h" 1
# 35 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef unsigned char s3e_uint8_t;
typedef signed char s3e_int8_t;
typedef unsigned short int s3e_uint16_t;
typedef signed short int s3e_int16_t;
typedef unsigned int s3e_uint32_t;
typedef signed int s3e_int32_t;
# 49 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
  typedef signed long long s3e_int64_t;
  typedef unsigned long long s3e_uint64_t;
# 72 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef s3e_uint64_t uint64_t;
typedef s3e_int64_t int64_t;
typedef s3e_uint32_t uint32_t;
typedef s3e_int32_t int32_t;
typedef s3e_uint16_t uint16_t;
typedef s3e_int16_t int16_t;
typedef s3e_uint8_t uint8_t;
typedef s3e_int8_t int8_t;
# 94 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
    typedef int intptr_t;
    typedef unsigned int uintptr_t;
# 106 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef unsigned int uint;
typedef unsigned short int ushort;
typedef unsigned long int ulong;
typedef unsigned char uint8;
typedef signed char int8;







typedef int64_t int64;
typedef uint64_t uint64;





typedef unsigned int uint32;






typedef signed int int32;






typedef uint16_t uint16;




typedef int16_t int16;
# 224 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef enum s3eResult
{
    S3E_RESULT_SUCCESS = 0,
    S3E_RESULT_ERROR = 1
} s3eResult;




typedef uint8 s3eBool;
# 242 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef wchar_t s3eWChar;
# 254 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef int32 (*s3eCallback) (void* systemData, void* userData);
# 16 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 2

# 1 "c:/marmalade/6.3/s3e/h/std/stdint.h" 1
# 19 "c:/marmalade/6.3/s3e/h/std/stdint.h"
typedef signed char int_least8_t;
typedef short int_least16_t;
typedef long int_least32_t;
typedef int64_t int_least64_t;

typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned long uint_least32_t;
typedef uint64_t uint_least64_t;

typedef signed char int_fast8_t;
typedef short int_fast16_t;
typedef long int_fast32_t;
typedef int64_t int_fast64_t;

typedef unsigned char uint_fast8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned long uint_fast32_t;
typedef uint64_t uint_fast64_t;

typedef int64_t intmax_t;
typedef uint64_t uintmax_t;
# 18 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/sys/select.h" 1
# 24 "c:/marmalade/6.3/s3e/h/std/sys/select.h"
struct timeval;

typedef struct fd_set
{
    char fds_bits[256/8];
} fd_set;
# 39 "c:/marmalade/6.3/s3e/h/std/sys/select.h"
extern "C" {

int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);

}
# 19 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 2



typedef long off_t;

typedef int64_t off64_t;


namespace std
{
typedef ::size_t size_t;
}


typedef uint u_int;
typedef uint8_t u_int8_t;
typedef uint16_t u_int16_t;
typedef uint32_t u_int32_t;
typedef uint64_t u_int64_t;

typedef unsigned short u_short;
typedef unsigned long u_long;
typedef unsigned char u_char;

typedef int ssize_t;
typedef int pid_t;
typedef short uid_t;
typedef short gid_t;
typedef int idtype_t;
typedef int id_t;
typedef uint32 mode_t;
typedef short dev_t;
typedef short ino_t;
typedef int key_t;
typedef void* caddr_t;
# 16 "c:/marmalade/6.3/s3e/h/std/assert.h" 2

extern "C" {
# 33 "c:/marmalade/6.3/s3e/h/std/assert.h"
        void __assert(const char* file, int line, const char* expr);
# 43 "c:/marmalade/6.3/s3e/h/std/assert.h"
}
# 24 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/float.h" 1
# 31 "c:/marmalade/6.3/s3e/h/std/float.h"
  extern "C" {
# 109 "c:/marmalade/6.3/s3e/h/std/float.h"
extern "C" {

unsigned _controlfp(unsigned, unsigned);
unsigned _clearfp(void);
unsigned _statusfp(void);

}
# 150 "c:/marmalade/6.3/s3e/h/std/float.h"
    }
# 25 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 2




typedef signed char int8;
typedef signed short int16;
typedef signed int int32;
typedef unsigned char uint8;
typedef unsigned short uint16;
typedef unsigned int uint32;
typedef float float32;
typedef double float64;
# 131 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h"
void* b2Alloc(int32 size);


void b2Free(void* mem);


void b2Log(const char* string, ...);



struct b2Version
{
 int32 major;
 int32 minor;
 int32 revision;
};


extern b2Version b2_version;
# 23 "v:/gigglingbits/box2d/Box2D/Common/b2Math.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/math.h" 1
# 17 "c:/marmalade/6.3/s3e/h/std/math.h"
extern "C" {
# 48 "c:/marmalade/6.3/s3e/h/std/math.h"
double pow(double x, double y);
float powf(float x, float y);
long double powl(long double x, long double y);

double sin(double x);
float sinf(float x);
long double sinl(long double x);

double asin(double x);
float asinf(float x);
long double asinl(long double x);

double sinh(double x);
float sinhf(float x);
long double sinhl(long double x);

double cos(double x);
float cosf(float x);
long double cosl(long double x);

double cosh(double x);
float coshf(float x);
long double coshl(long double x);

double acos(double x);
float acosf(float x);
long double acosl(long double x);

double tan(double x);
float tanf(float x);
long double tanl(long double x);

double atan(double x);
float atanf(float x);
long double atanl(long double x);

double atan2(double y, double x);
float atan2f(float y, float x);
long double atan2l(long double y, long double x);

double tanh(double x);
float tanhf(float x);
long double tanhl(long double x);

double fabs(double x);
float fabsf(float x);
long double fabsl(long double x);

double ceil(double x);
float ceilf(float x);
long double ceill(long double x);

double floor(double x);
float floorf(float x);
long double floorl(long double x);

double sqrt(double x);
float sqrtf(float x);
long double sqrtl(long double x);

double cbrt(double x);
float cbrtf(float x);
long double cbrtl(long double x);

double fmod(double x, double y);
float fmodf(float x, float y);
long double fmodl(long double x, long double y);

double fmin(double x, double y);
float fminf(float x, float y);
long double fminl(long double x, long double y);

double fmax(double x, double y);
float fmaxf(float x, float y);
long double fmaxl(long double x, long double y);

double modf(double x, double *iptr);
float modff(float x, float *iptr);
long double modfl(long double x, long double *iptr);

double ldexp(double x, int exp);
float ldexpf(float x, int exp);
long double ldexpl(long double x, int exp);

double exp(double x);
float expf(float x);
long double expl(long double x);

double log(double x);
float logf(float x);
long double logl(long double x);

double log10(double x);
float log10f(float x);
long double log10l(long double x);

double rint(double x);
float rintf(float x);
long double rintl(long double x);

double round(double x);
float roundf(float x);
long double roundl(long double x);

double frexp(double x, int *exp);
float frexpf(float x, int *exp);
long double frexpl(long double x, int *exp);

long int lround(double x);
long int lroundf(float x);
long int lroundl(long double x);

int64 llround(double x);
int64 llroundf(float x);
int64 llroundl(long double x);

double nextafter(double x, double y);
float nextafterf(float x, float y);
long double nextafterl(long double x, long double y);

double nexttoward(double x, long double y);
float nexttowardf(float x, long double y);
long double nexttowardl(long double x, long double y);

double trunc(double x);
float truncf(float x);
long double truncl(long double x);

double hypot(double x, double y);

double copysign(double x, double y);
float copysignf(float x, float y);
long double copysignl(long double x, long double y);

int finite(double x);
# 196 "c:/marmalade/6.3/s3e/h/std/math.h"
# 1 "c:/marmalade/6.3/s3e/h/std/math_gcc.h" 1
# 33 "c:/marmalade/6.3/s3e/h/std/math_gcc.h"
int __isnanf(float);
int __isnand(double);
int __isinff(float);
int __isinfd(double);
int __signbitf(float);
int __signbitd(double);
int __fpclassifyf(float);
int __fpclassifyd(double);
int __fpclassifyl(long double);
# 197 "c:/marmalade/6.3/s3e/h/std/math.h" 2
# 222 "c:/marmalade/6.3/s3e/h/std/math.h"
}
# 24 "v:/gigglingbits/box2d/Box2D/Common/b2Math.h" 2


inline bool b2IsValid(float32 x)
{
 int32 ix = *reinterpret_cast<int32*>(&x);
 return (ix & 0x7f800000) != 0x7f800000;
}


inline float32 b2InvSqrt(float32 x)
{
 union
 {
  float32 x;
  int32 i;
 } convert;

 convert.x = x;
 float32 xhalf = 0.5f * x;
 convert.i = 0x5f3759df - (convert.i >> 1);
 x = convert.x;
 x = x * (1.5f - xhalf * x * x);
 return x;
}





struct b2Vec2
{

 b2Vec2() {}


 b2Vec2(float32 x, float32 y) : x(x), y(y) {}


 void SetZero() { x = 0.0f; y = 0.0f; }


 void Set(float32 x_, float32 y_) { x = x_; y = y_; }


 b2Vec2 operator -() const { b2Vec2 v; v.Set(-x, -y); return v; }


 float32 operator () (int32 i) const
 {
  return (&x)[i];
 }


 float32& operator () (int32 i)
 {
  return (&x)[i];
 }


 void operator += (const b2Vec2& v)
 {
  x += v.x; y += v.y;
 }


 void operator -= (const b2Vec2& v)
 {
  x -= v.x; y -= v.y;
 }


 void operator *= (float32 a)
 {
  x *= a; y *= a;
 }


 float32 Length() const
 {
  return sqrtf(x * x + y * y);
 }



 float32 LengthSquared() const
 {
  return x * x + y * y;
 }


 float32 Normalize()
 {
  float32 length = Length();
  if (length < 1.19209290e-7F)
  {
   return 0.0f;
  }
  float32 invLength = 1.0f / length;
  x *= invLength;
  y *= invLength;

  return length;
 }


 bool IsValid() const
 {
  return b2IsValid(x) && b2IsValid(y);
 }


 b2Vec2 Skew() const
 {
  return b2Vec2(-y, x);
 }

 float32 x, y;
};


struct b2Vec3
{

 b2Vec3() {}


 b2Vec3(float32 x, float32 y, float32 z) : x(x), y(y), z(z) {}


 void SetZero() { x = 0.0f; y = 0.0f; z = 0.0f; }


 void Set(float32 x_, float32 y_, float32 z_) { x = x_; y = y_; z = z_; }


 b2Vec3 operator -() const { b2Vec3 v; v.Set(-x, -y, -z); return v; }


 void operator += (const b2Vec3& v)
 {
  x += v.x; y += v.y; z += v.z;
 }


 void operator -= (const b2Vec3& v)
 {
  x -= v.x; y -= v.y; z -= v.z;
 }


 void operator *= (float32 s)
 {
  x *= s; y *= s; z *= s;
 }

 float32 x, y, z;
};


struct b2Mat22
{

 b2Mat22() {}


 b2Mat22(const b2Vec2& c1, const b2Vec2& c2)
 {
  ex = c1;
  ey = c2;
 }


 b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)
 {
  ex.x = a11; ex.y = a21;
  ey.x = a12; ey.y = a22;
 }


 void Set(const b2Vec2& c1, const b2Vec2& c2)
 {
  ex = c1;
  ey = c2;
 }


 void SetIdentity()
 {
  ex.x = 1.0f; ey.x = 0.0f;
  ex.y = 0.0f; ey.y = 1.0f;
 }


 void SetZero()
 {
  ex.x = 0.0f; ey.x = 0.0f;
  ex.y = 0.0f; ey.y = 0.0f;
 }

 b2Mat22 GetInverse() const
 {
  float32 a = ex.x, b = ey.x, c = ex.y, d = ey.y;
  b2Mat22 B;
  float32 det = a * d - b * c;
  if (det != 0.0f)
  {
   det = 1.0f / det;
  }
  B.ex.x = det * d; B.ey.x = -det * b;
  B.ex.y = -det * c; B.ey.y = det * a;
  return B;
 }



 b2Vec2 Solve(const b2Vec2& b) const
 {
  float32 a11 = ex.x, a12 = ey.x, a21 = ex.y, a22 = ey.y;
  float32 det = a11 * a22 - a12 * a21;
  if (det != 0.0f)
  {
   det = 1.0f / det;
  }
  b2Vec2 x;
  x.x = det * (a22 * b.x - a12 * b.y);
  x.y = det * (a11 * b.y - a21 * b.x);
  return x;
 }

 b2Vec2 ex, ey;
};


struct b2Mat33
{

 b2Mat33() {}


 b2Mat33(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3)
 {
  ex = c1;
  ey = c2;
  ez = c3;
 }


 void SetZero()
 {
  ex.SetZero();
  ey.SetZero();
  ez.SetZero();
 }



 b2Vec3 Solve33(const b2Vec3& b) const;




 b2Vec2 Solve22(const b2Vec2& b) const;



 void GetInverse22(b2Mat33* M) const;



 void GetSymInverse33(b2Mat33* M) const;

 b2Vec3 ex, ey, ez;
};


struct b2Rot
{
 b2Rot() {}


 explicit b2Rot(float32 angle)
 {

  s = sinf(angle);
  c = cosf(angle);
 }


 void Set(float32 angle)
 {

  s = sinf(angle);
  c = cosf(angle);
 }


 void SetIdentity()
 {
  s = 0.0f;
  c = 1.0f;
 }


 float32 GetAngle() const
 {
  return atan2f(s, c);
 }


 b2Vec2 GetXAxis() const
 {
  return b2Vec2(c, s);
 }


 b2Vec2 GetYAxis() const
 {
  return b2Vec2(-s, c);
 }


 float32 s, c;
};



struct b2Transform
{

 b2Transform() {}


 b2Transform(const b2Vec2& position, const b2Rot& rotation) : p(position), q(rotation) {}


 void SetIdentity()
 {
  p.SetZero();
  q.SetIdentity();
 }


 void Set(const b2Vec2& position, float32 angle)
 {
  p = position;
  q.Set(angle);
 }

 b2Vec2 p;
 b2Rot q;
};





struct b2Sweep
{


 void GetTransform(b2Transform* xfb, float32 beta) const;



 void Advance(float32 alpha);


 void Normalize();

 b2Vec2 localCenter;
 b2Vec2 c0, c;
 float32 a0, a;



 float32 alpha0;
};


extern const b2Vec2 b2Vec2_zero;


inline float32 b2Dot(const b2Vec2& a, const b2Vec2& b)
{
 return a.x * b.x + a.y * b.y;
}


inline float32 b2Cross(const b2Vec2& a, const b2Vec2& b)
{
 return a.x * b.y - a.y * b.x;
}



inline b2Vec2 b2Cross(const b2Vec2& a, float32 s)
{
 return b2Vec2(s * a.y, -s * a.x);
}



inline b2Vec2 b2Cross(float32 s, const b2Vec2& a)
{
 return b2Vec2(-s * a.y, s * a.x);
}



inline b2Vec2 b2Mul(const b2Mat22& A, const b2Vec2& v)
{
 return b2Vec2(A.ex.x * v.x + A.ey.x * v.y, A.ex.y * v.x + A.ey.y * v.y);
}



inline b2Vec2 b2MulT(const b2Mat22& A, const b2Vec2& v)
{
 return b2Vec2(b2Dot(v, A.ex), b2Dot(v, A.ey));
}


inline b2Vec2 operator + (const b2Vec2& a, const b2Vec2& b)
{
 return b2Vec2(a.x + b.x, a.y + b.y);
}


inline b2Vec2 operator - (const b2Vec2& a, const b2Vec2& b)
{
 return b2Vec2(a.x - b.x, a.y - b.y);
}

inline b2Vec2 operator * (float32 s, const b2Vec2& a)
{
 return b2Vec2(s * a.x, s * a.y);
}

inline bool operator == (const b2Vec2& a, const b2Vec2& b)
{
 return a.x == b.x && a.y == b.y;
}

inline float32 b2Distance(const b2Vec2& a, const b2Vec2& b)
{
 b2Vec2 c = a - b;
 return c.Length();
}

inline float32 b2DistanceSquared(const b2Vec2& a, const b2Vec2& b)
{
 b2Vec2 c = a - b;
 return b2Dot(c, c);
}

inline b2Vec3 operator * (float32 s, const b2Vec3& a)
{
 return b2Vec3(s * a.x, s * a.y, s * a.z);
}


inline b2Vec3 operator + (const b2Vec3& a, const b2Vec3& b)
{
 return b2Vec3(a.x + b.x, a.y + b.y, a.z + b.z);
}


inline b2Vec3 operator - (const b2Vec3& a, const b2Vec3& b)
{
 return b2Vec3(a.x - b.x, a.y - b.y, a.z - b.z);
}


inline float32 b2Dot(const b2Vec3& a, const b2Vec3& b)
{
 return a.x * b.x + a.y * b.y + a.z * b.z;
}


inline b2Vec3 b2Cross(const b2Vec3& a, const b2Vec3& b)
{
 return b2Vec3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
}

inline b2Mat22 operator + (const b2Mat22& A, const b2Mat22& B)
{
 return b2Mat22(A.ex + B.ex, A.ey + B.ey);
}


inline b2Mat22 b2Mul(const b2Mat22& A, const b2Mat22& B)
{
 return b2Mat22(b2Mul(A, B.ex), b2Mul(A, B.ey));
}


inline b2Mat22 b2MulT(const b2Mat22& A, const b2Mat22& B)
{
 b2Vec2 c1(b2Dot(A.ex, B.ex), b2Dot(A.ey, B.ex));
 b2Vec2 c2(b2Dot(A.ex, B.ey), b2Dot(A.ey, B.ey));
 return b2Mat22(c1, c2);
}


inline b2Vec3 b2Mul(const b2Mat33& A, const b2Vec3& v)
{
 return v.x * A.ex + v.y * A.ey + v.z * A.ez;
}


inline b2Vec2 b2Mul22(const b2Mat33& A, const b2Vec2& v)
{
 return b2Vec2(A.ex.x * v.x + A.ey.x * v.y, A.ex.y * v.x + A.ey.y * v.y);
}


inline b2Rot b2Mul(const b2Rot& q, const b2Rot& r)
{




 b2Rot qr;
 qr.s = q.s * r.c + q.c * r.s;
 qr.c = q.c * r.c - q.s * r.s;
 return qr;
}


inline b2Rot b2MulT(const b2Rot& q, const b2Rot& r)
{




 b2Rot qr;
 qr.s = q.c * r.s - q.s * r.c;
 qr.c = q.c * r.c + q.s * r.s;
 return qr;
}


inline b2Vec2 b2Mul(const b2Rot& q, const b2Vec2& v)
{
 return b2Vec2(q.c * v.x - q.s * v.y, q.s * v.x + q.c * v.y);
}


inline b2Vec2 b2MulT(const b2Rot& q, const b2Vec2& v)
{
 return b2Vec2(q.c * v.x + q.s * v.y, -q.s * v.x + q.c * v.y);
}

inline b2Vec2 b2Mul(const b2Transform& T, const b2Vec2& v)
{
 float32 x = (T.q.c * v.x - T.q.s * v.y) + T.p.x;
 float32 y = (T.q.s * v.x + T.q.c * v.y) + T.p.y;

 return b2Vec2(x, y);
}

inline b2Vec2 b2MulT(const b2Transform& T, const b2Vec2& v)
{
 float32 px = v.x - T.p.x;
 float32 py = v.y - T.p.y;
 float32 x = (T.q.c * px + T.q.s * py);
 float32 y = (-T.q.s * px + T.q.c * py);

 return b2Vec2(x, y);
}



inline b2Transform b2Mul(const b2Transform& A, const b2Transform& B)
{
 b2Transform C;
 C.q = b2Mul(A.q, B.q);
 C.p = b2Mul(A.q, B.p) + A.p;
 return C;
}



inline b2Transform b2MulT(const b2Transform& A, const b2Transform& B)
{
 b2Transform C;
 C.q = b2MulT(A.q, B.q);
 C.p = b2MulT(A.q, B.p - A.p);
 return C;
}

template <typename T>
inline T b2Abs(T a)
{
 return a > T(0) ? a : -a;
}

inline b2Vec2 b2Abs(const b2Vec2& a)
{
 return b2Vec2(b2Abs(a.x), b2Abs(a.y));
}

inline b2Mat22 b2Abs(const b2Mat22& A)
{
 return b2Mat22(b2Abs(A.ex), b2Abs(A.ey));
}

template <typename T>
inline T b2Min(T a, T b)
{
 return a < b ? a : b;
}

inline b2Vec2 b2Min(const b2Vec2& a, const b2Vec2& b)
{
 return b2Vec2(b2Min(a.x, b.x), b2Min(a.y, b.y));
}

template <typename T>
inline T b2Max(T a, T b)
{
 return a > b ? a : b;
}

inline b2Vec2 b2Max(const b2Vec2& a, const b2Vec2& b)
{
 return b2Vec2(b2Max(a.x, b.x), b2Max(a.y, b.y));
}

template <typename T>
inline T b2Clamp(T a, T low, T high)
{
 return b2Max(low, b2Min(a, high));
}

inline b2Vec2 b2Clamp(const b2Vec2& a, const b2Vec2& low, const b2Vec2& high)
{
 return b2Max(low, b2Min(a, high));
}

template<typename T> inline void b2Swap(T& a, T& b)
{
 T tmp = a;
 a = b;
 b = tmp;
}






inline uint32 b2NextPowerOfTwo(uint32 x)
{
 x |= (x >> 1);
 x |= (x >> 2);
 x |= (x >> 4);
 x |= (x >> 8);
 x |= (x >> 16);
 return x + 1;
}

inline bool b2IsPowerOfTwo(uint32 x)
{
 bool result = x > 0 && (x & (x - 1)) == 0;
 return result;
}

inline void b2Sweep::GetTransform(b2Transform* xf, float32 beta) const
{
 xf->p = (1.0f - beta) * c0 + beta * c;
 float32 angle = (1.0f - beta) * a0 + beta * a;
 xf->q.Set(angle);


 xf->p -= b2Mul(xf->q, localCenter);
}

inline void b2Sweep::Advance(float32 alpha)
{
 ((alpha0 < 1.0f) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Common/b2Math.h", 704, "alpha0 < 1.0f"));
 float32 beta = (alpha - alpha0) / (1.0f - alpha0);
 c0 += beta * (c - c0);
 a0 += beta * (a - a0);
 alpha0 = alpha;
}


inline void b2Sweep::Normalize()
{
 float32 twoPi = 2.0f * 3.14159265359f;
 float32 d = twoPi * floorf(a0 / twoPi);
 a0 -= d;
 a -= d;
}
# 23 "v:/gigglingbits/box2d/Box2D/Rope/b2Rope.h" 2

class b2Draw;


struct b2RopeDef
{
 b2RopeDef()
 {
  vertices = __null;
  count = 0;
  masses = __null;
  gravity.SetZero();
  damping = 0.1f;
  k2 = 0.9f;
  k3 = 0.1f;
 }


 b2Vec2* vertices;


 int32 count;


 float32* masses;


 b2Vec2 gravity;


 float32 damping;


 float32 k2;


 float32 k3;
};


class b2Rope
{
public:
 b2Rope();
 ~b2Rope();


 void Initialize(const b2RopeDef* def);


 void Step(float32 timeStep, int32 iterations);


 int32 GetVertexCount() const
 {
  return m_count;
 }


 const b2Vec2* GetVertices() const
 {
  return m_ps;
 }


 void Draw(b2Draw* draw) const;


 void SetAngle(float32 angle);

private:

 void SolveC2();
 void SolveC3();

 int32 m_count;
 b2Vec2* m_ps;
 b2Vec2* m_p0s;
 b2Vec2* m_vs;

 float32* m_ims;

 float32* m_Ls;
 float32* m_as;

 b2Vec2 m_gravity;
 float32 m_damping;

 float32 m_k2;
 float32 m_k3;
};
# 20 "v:/gigglingbits/box2d/Box2D/Rope/b2Rope.cpp" 2
# 1 "v:/gigglingbits/box2d/Box2D/Common/b2Draw.h" 1
# 25 "v:/gigglingbits/box2d/Box2D/Common/b2Draw.h"
struct b2Color
{
 b2Color() {}
 b2Color(float32 r, float32 g, float32 b) : r(r), g(g), b(b) {}
 void Set(float32 ri, float32 gi, float32 bi) { r = ri; g = gi; b = bi; }
 float32 r, g, b;
};



class b2Draw
{
public:
 b2Draw();

 virtual ~b2Draw() {}

 enum
 {
  e_shapeBit = 0x0001,
  e_jointBit = 0x0002,
  e_aabbBit = 0x0004,
  e_pairBit = 0x0008,
  e_centerOfMassBit = 0x0010
 };


 void SetFlags(uint32 flags);


 uint32 GetFlags() const;


 void AppendFlags(uint32 flags);


 void ClearFlags(uint32 flags);


 virtual void DrawPolygon(const b2Vec2* vertices, int32 vertexCount, const b2Color& color) = 0;


 virtual void DrawSolidPolygon(const b2Vec2* vertices, int32 vertexCount, const b2Color& color) = 0;


 virtual void DrawCircle(const b2Vec2& center, float32 radius, const b2Color& color) = 0;


 virtual void DrawSolidCircle(const b2Vec2& center, float32 radius, const b2Vec2& axis, const b2Color& color) = 0;


 virtual void DrawSegment(const b2Vec2& p1, const b2Vec2& p2, const b2Color& color) = 0;



 virtual void DrawTransform(const b2Transform& xf) = 0;

protected:
 uint32 m_drawFlags;
};
# 21 "v:/gigglingbits/box2d/Box2D/Rope/b2Rope.cpp" 2

b2Rope::b2Rope()
{
 m_count = 0;
 m_ps = __null;
 m_p0s = __null;
 m_vs = __null;
 m_ims = __null;
 m_Ls = __null;
 m_as = __null;
 m_gravity.SetZero();
 m_k2 = 1.0f;
 m_k3 = 0.1f;
}

b2Rope::~b2Rope()
{
 b2Free(m_ps);
 b2Free(m_p0s);
 b2Free(m_vs);
 b2Free(m_ims);
 b2Free(m_Ls);
 b2Free(m_as);
}

void b2Rope::Initialize(const b2RopeDef* def)
{
 ((def->count >= 3) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Rope/b2Rope.cpp", 48, "def->count >= 3"));
 m_count = def->count;
 m_ps = (b2Vec2*)b2Alloc(m_count * sizeof(b2Vec2));
 m_p0s = (b2Vec2*)b2Alloc(m_count * sizeof(b2Vec2));
 m_vs = (b2Vec2*)b2Alloc(m_count * sizeof(b2Vec2));
 m_ims = (float32*)b2Alloc(m_count * sizeof(float32));

 for (int32 i = 0; i < m_count; ++i)
 {
  m_ps[i] = def->vertices[i];
  m_p0s[i] = def->vertices[i];
  m_vs[i].SetZero();

  float32 m = def->masses[i];
  if (m > 0.0f)
  {
   m_ims[i] = 1.0f / m;
  }
  else
  {
   m_ims[i] = 0.0f;
  }
 }

 int32 count2 = m_count - 1;
 int32 count3 = m_count - 2;
 m_Ls = (float32*)b2Alloc(count2 * sizeof(float32));
 m_as = (float32*)b2Alloc(count3 * sizeof(float32));

 for (int32 i = 0; i < count2; ++i)
 {
  b2Vec2 p1 = m_ps[i];
  b2Vec2 p2 = m_ps[i+1];
  m_Ls[i] = b2Distance(p1, p2);
 }

 for (int32 i = 0; i < count3; ++i)
 {
  b2Vec2 p1 = m_ps[i];
  b2Vec2 p2 = m_ps[i + 1];
  b2Vec2 p3 = m_ps[i + 2];

  b2Vec2 d1 = p2 - p1;
  b2Vec2 d2 = p3 - p2;

  float32 a = b2Cross(d1, d2);
  float32 b = b2Dot(d1, d2);

  m_as[i] = atan2f(a, b);
 }

 m_gravity = def->gravity;
 m_damping = def->damping;
 m_k2 = def->k2;
 m_k3 = def->k3;
}

void b2Rope::Step(float32 h, int32 iterations)
{
 if (h == 0.0)
 {
  return;
 }

 float32 d = expf(- h * m_damping);

 for (int32 i = 0; i < m_count; ++i)
 {
  m_p0s[i] = m_ps[i];
  if (m_ims[i] > 0.0f)
  {
   m_vs[i] += h * m_gravity;
  }
  m_vs[i] *= d;
  m_ps[i] += h * m_vs[i];

 }

 for (int32 i = 0; i < iterations; ++i)
 {
  SolveC2();
  SolveC3();
  SolveC2();
 }

 float32 inv_h = 1.0f / h;
 for (int32 i = 0; i < m_count; ++i)
 {
  m_vs[i] = inv_h * (m_ps[i] - m_p0s[i]);
 }
}

void b2Rope::SolveC2()
{
 int32 count2 = m_count - 1;

 for (int32 i = 0; i < count2; ++i)
 {
  b2Vec2 p1 = m_ps[i];
  b2Vec2 p2 = m_ps[i + 1];

  b2Vec2 d = p2 - p1;
  float32 L = d.Normalize();

  float32 im1 = m_ims[i];
  float32 im2 = m_ims[i + 1];

  if (im1 + im2 == 0.0f)
  {
   continue;
  }

  float32 s1 = im1 / (im1 + im2);
  float32 s2 = im2 / (im1 + im2);

  p1 -= m_k2 * s1 * (m_Ls[i] - L) * d;
  p2 += m_k2 * s2 * (m_Ls[i] - L) * d;

  m_ps[i] = p1;
  m_ps[i + 1] = p2;
 }
}

void b2Rope::SetAngle(float32 angle)
{
 int32 count3 = m_count - 2;
 for (int32 i = 0; i < count3; ++i)
 {
  m_as[i] = angle;
 }
}

void b2Rope::SolveC3()
{
 int32 count3 = m_count - 2;

 for (int32 i = 0; i < count3; ++i)
 {
  b2Vec2 p1 = m_ps[i];
  b2Vec2 p2 = m_ps[i + 1];
  b2Vec2 p3 = m_ps[i + 2];

  float32 m1 = m_ims[i];
  float32 m2 = m_ims[i + 1];
  float32 m3 = m_ims[i + 2];

  b2Vec2 d1 = p2 - p1;
  b2Vec2 d2 = p3 - p2;

  float32 L1sqr = d1.LengthSquared();
  float32 L2sqr = d2.LengthSquared();

  if (L1sqr * L2sqr == 0.0f)
  {
   continue;
  }

  float32 a = b2Cross(d1, d2);
  float32 b = b2Dot(d1, d2);

  float32 angle = atan2f(a, b);

  b2Vec2 Jd1 = (-1.0f / L1sqr) * d1.Skew();
  b2Vec2 Jd2 = (1.0f / L2sqr) * d2.Skew();

  b2Vec2 J1 = -Jd1;
  b2Vec2 J2 = Jd1 - Jd2;
  b2Vec2 J3 = Jd2;

  float32 mass = m1 * b2Dot(J1, J1) + m2 * b2Dot(J2, J2) + m3 * b2Dot(J3, J3);
  if (mass == 0.0f)
  {
   continue;
  }

  mass = 1.0f / mass;

  float32 C = angle - m_as[i];

  while (C > 3.14159265359f)
  {
   angle -= 2 * 3.14159265359f;
   C = angle - m_as[i];
  }

  while (C < -3.14159265359f)
  {
   angle += 2.0f * 3.14159265359f;
   C = angle - m_as[i];
  }

  float32 impulse = - m_k3 * mass * C;

  p1 += (m1 * impulse) * J1;
  p2 += (m2 * impulse) * J2;
  p3 += (m3 * impulse) * J3;

  m_ps[i] = p1;
  m_ps[i + 1] = p2;
  m_ps[i + 2] = p3;
 }
}

void b2Rope::Draw(b2Draw* draw) const
{
 b2Color c(0.4f, 0.5f, 0.7f);

 for (int32 i = 0; i < m_count - 1; ++i)
 {
  draw->DrawSegment(m_ps[i], m_ps[i+1], c);
 }
}
