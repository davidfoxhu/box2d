# 1 "v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp"
# 1 "v:\\GigglingBits\\box2d\\HeyBox2D\\build_heybox2d_vc11//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "v:/GigglingBits/box2d/HeyBox2D/build_heybox2d_vc11/temp_defines_debug.h" 1
# 1 "<command-line>" 2
# 1 "v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp"
# 19 "v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp"
# 1 "v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.h" 1
# 22 "v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.h"
# 1 "v:/gigglingbits/box2d/Box2D/Collision/b2Collision.h" 1
# 22 "v:/gigglingbits/box2d/Box2D/Collision/b2Collision.h"
# 1 "v:/gigglingbits/box2d/Box2D/Common/b2Math.h" 1
# 22 "v:/gigglingbits/box2d/Box2D/Common/b2Math.h"
# 1 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 1
# 22 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h"
# 1 "c:/marmalade/6.3/s3e/h/std/stddef.h" 1
# 15 "c:/marmalade/6.3/s3e/h/std/stddef.h"
typedef signed int ptrdiff_t;


    typedef unsigned int wint_t;
    typedef unsigned long int wctype_t;







typedef unsigned int size_t;
# 23 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/assert.h" 1
# 15 "c:/marmalade/6.3/s3e/h/std/assert.h"
# 1 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 1
# 15 "c:/marmalade/6.3/s3e/h/std/sys/types.h"
# 1 "c:/marmalade/6.3/s3e/h/s3eTypes.h" 1
# 35 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef unsigned char s3e_uint8_t;
typedef signed char s3e_int8_t;
typedef unsigned short int s3e_uint16_t;
typedef signed short int s3e_int16_t;
typedef unsigned int s3e_uint32_t;
typedef signed int s3e_int32_t;
# 49 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
  typedef signed long long s3e_int64_t;
  typedef unsigned long long s3e_uint64_t;
# 72 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef s3e_uint64_t uint64_t;
typedef s3e_int64_t int64_t;
typedef s3e_uint32_t uint32_t;
typedef s3e_int32_t int32_t;
typedef s3e_uint16_t uint16_t;
typedef s3e_int16_t int16_t;
typedef s3e_uint8_t uint8_t;
typedef s3e_int8_t int8_t;
# 94 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
    typedef int intptr_t;
    typedef unsigned int uintptr_t;
# 106 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef unsigned int uint;
typedef unsigned short int ushort;
typedef unsigned long int ulong;
typedef unsigned char uint8;
typedef signed char int8;







typedef int64_t int64;
typedef uint64_t uint64;





typedef unsigned int uint32;






typedef signed int int32;






typedef uint16_t uint16;




typedef int16_t int16;
# 224 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef enum s3eResult
{
    S3E_RESULT_SUCCESS = 0,
    S3E_RESULT_ERROR = 1
} s3eResult;




typedef uint8 s3eBool;
# 242 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef wchar_t s3eWChar;
# 254 "c:/marmalade/6.3/s3e/h/s3eTypes.h"
typedef int32 (*s3eCallback) (void* systemData, void* userData);
# 16 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 2

# 1 "c:/marmalade/6.3/s3e/h/std/stdint.h" 1
# 19 "c:/marmalade/6.3/s3e/h/std/stdint.h"
typedef signed char int_least8_t;
typedef short int_least16_t;
typedef long int_least32_t;
typedef int64_t int_least64_t;

typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned long uint_least32_t;
typedef uint64_t uint_least64_t;

typedef signed char int_fast8_t;
typedef short int_fast16_t;
typedef long int_fast32_t;
typedef int64_t int_fast64_t;

typedef unsigned char uint_fast8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned long uint_fast32_t;
typedef uint64_t uint_fast64_t;

typedef int64_t intmax_t;
typedef uint64_t uintmax_t;
# 18 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/sys/select.h" 1
# 24 "c:/marmalade/6.3/s3e/h/std/sys/select.h"
struct timeval;

typedef struct fd_set
{
    char fds_bits[256/8];
} fd_set;
# 39 "c:/marmalade/6.3/s3e/h/std/sys/select.h"
extern "C" {

int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);

}
# 19 "c:/marmalade/6.3/s3e/h/std/sys/types.h" 2



typedef long off_t;

typedef int64_t off64_t;


namespace std
{
typedef ::size_t size_t;
}


typedef uint u_int;
typedef uint8_t u_int8_t;
typedef uint16_t u_int16_t;
typedef uint32_t u_int32_t;
typedef uint64_t u_int64_t;

typedef unsigned short u_short;
typedef unsigned long u_long;
typedef unsigned char u_char;

typedef int ssize_t;
typedef int pid_t;
typedef short uid_t;
typedef short gid_t;
typedef int idtype_t;
typedef int id_t;
typedef uint32 mode_t;
typedef short dev_t;
typedef short ino_t;
typedef int key_t;
typedef void* caddr_t;
# 16 "c:/marmalade/6.3/s3e/h/std/assert.h" 2

extern "C" {
# 33 "c:/marmalade/6.3/s3e/h/std/assert.h"
        void __assert(const char* file, int line, const char* expr);
# 43 "c:/marmalade/6.3/s3e/h/std/assert.h"
}
# 24 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/float.h" 1
# 31 "c:/marmalade/6.3/s3e/h/std/float.h"
  extern "C" {
# 109 "c:/marmalade/6.3/s3e/h/std/float.h"
extern "C" {

unsigned _controlfp(unsigned, unsigned);
unsigned _clearfp(void);
unsigned _statusfp(void);

}
# 150 "c:/marmalade/6.3/s3e/h/std/float.h"
    }
# 25 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h" 2




typedef signed char int8;
typedef signed short int16;
typedef signed int int32;
typedef unsigned char uint8;
typedef unsigned short uint16;
typedef unsigned int uint32;
typedef float float32;
typedef double float64;
# 131 "v:/gigglingbits/box2d/Box2D/Common/b2Settings.h"
void* b2Alloc(int32 size);


void b2Free(void* mem);


void b2Log(const char* string, ...);



struct b2Version
{
 int32 major;
 int32 minor;
 int32 revision;
};


extern b2Version b2_version;
# 23 "v:/gigglingbits/box2d/Box2D/Common/b2Math.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/math.h" 1
# 17 "c:/marmalade/6.3/s3e/h/std/math.h"
extern "C" {
# 48 "c:/marmalade/6.3/s3e/h/std/math.h"
double pow(double x, double y);
float powf(float x, float y);
long double powl(long double x, long double y);

double sin(double x);
float sinf(float x);
long double sinl(long double x);

double asin(double x);
float asinf(float x);
long double asinl(long double x);

double sinh(double x);
float sinhf(float x);
long double sinhl(long double x);

double cos(double x);
float cosf(float x);
long double cosl(long double x);

double cosh(double x);
float coshf(float x);
long double coshl(long double x);

double acos(double x);
float acosf(float x);
long double acosl(long double x);

double tan(double x);
float tanf(float x);
long double tanl(long double x);

double atan(double x);
float atanf(float x);
long double atanl(long double x);

double atan2(double y, double x);
float atan2f(float y, float x);
long double atan2l(long double y, long double x);

double tanh(double x);
float tanhf(float x);
long double tanhl(long double x);

double fabs(double x);
float fabsf(float x);
long double fabsl(long double x);

double ceil(double x);
float ceilf(float x);
long double ceill(long double x);

double floor(double x);
float floorf(float x);
long double floorl(long double x);

double sqrt(double x);
float sqrtf(float x);
long double sqrtl(long double x);

double cbrt(double x);
float cbrtf(float x);
long double cbrtl(long double x);

double fmod(double x, double y);
float fmodf(float x, float y);
long double fmodl(long double x, long double y);

double fmin(double x, double y);
float fminf(float x, float y);
long double fminl(long double x, long double y);

double fmax(double x, double y);
float fmaxf(float x, float y);
long double fmaxl(long double x, long double y);

double modf(double x, double *iptr);
float modff(float x, float *iptr);
long double modfl(long double x, long double *iptr);

double ldexp(double x, int exp);
float ldexpf(float x, int exp);
long double ldexpl(long double x, int exp);

double exp(double x);
float expf(float x);
long double expl(long double x);

double log(double x);
float logf(float x);
long double logl(long double x);

double log10(double x);
float log10f(float x);
long double log10l(long double x);

double rint(double x);
float rintf(float x);
long double rintl(long double x);

double round(double x);
float roundf(float x);
long double roundl(long double x);

double frexp(double x, int *exp);
float frexpf(float x, int *exp);
long double frexpl(long double x, int *exp);

long int lround(double x);
long int lroundf(float x);
long int lroundl(long double x);

int64 llround(double x);
int64 llroundf(float x);
int64 llroundl(long double x);

double nextafter(double x, double y);
float nextafterf(float x, float y);
long double nextafterl(long double x, long double y);

double nexttoward(double x, long double y);
float nexttowardf(float x, long double y);
long double nexttowardl(long double x, long double y);

double trunc(double x);
float truncf(float x);
long double truncl(long double x);

double hypot(double x, double y);

double copysign(double x, double y);
float copysignf(float x, float y);
long double copysignl(long double x, long double y);

int finite(double x);
# 196 "c:/marmalade/6.3/s3e/h/std/math.h"
# 1 "c:/marmalade/6.3/s3e/h/std/math_gcc.h" 1
# 33 "c:/marmalade/6.3/s3e/h/std/math_gcc.h"
int __isnanf(float);
int __isnand(double);
int __isinff(float);
int __isinfd(double);
int __signbitf(float);
int __signbitd(double);
int __fpclassifyf(float);
int __fpclassifyd(double);
int __fpclassifyl(long double);
# 197 "c:/marmalade/6.3/s3e/h/std/math.h" 2
# 222 "c:/marmalade/6.3/s3e/h/std/math.h"
}
# 24 "v:/gigglingbits/box2d/Box2D/Common/b2Math.h" 2


inline bool b2IsValid(float32 x)
{
 int32 ix = *reinterpret_cast<int32*>(&x);
 return (ix & 0x7f800000) != 0x7f800000;
}


inline float32 b2InvSqrt(float32 x)
{
 union
 {
  float32 x;
  int32 i;
 } convert;

 convert.x = x;
 float32 xhalf = 0.5f * x;
 convert.i = 0x5f3759df - (convert.i >> 1);
 x = convert.x;
 x = x * (1.5f - xhalf * x * x);
 return x;
}





struct b2Vec2
{

 b2Vec2() {}


 b2Vec2(float32 x, float32 y) : x(x), y(y) {}


 void SetZero() { x = 0.0f; y = 0.0f; }


 void Set(float32 x_, float32 y_) { x = x_; y = y_; }


 b2Vec2 operator -() const { b2Vec2 v; v.Set(-x, -y); return v; }


 float32 operator () (int32 i) const
 {
  return (&x)[i];
 }


 float32& operator () (int32 i)
 {
  return (&x)[i];
 }


 void operator += (const b2Vec2& v)
 {
  x += v.x; y += v.y;
 }


 void operator -= (const b2Vec2& v)
 {
  x -= v.x; y -= v.y;
 }


 void operator *= (float32 a)
 {
  x *= a; y *= a;
 }


 float32 Length() const
 {
  return sqrtf(x * x + y * y);
 }



 float32 LengthSquared() const
 {
  return x * x + y * y;
 }


 float32 Normalize()
 {
  float32 length = Length();
  if (length < 1.19209290e-7F)
  {
   return 0.0f;
  }
  float32 invLength = 1.0f / length;
  x *= invLength;
  y *= invLength;

  return length;
 }


 bool IsValid() const
 {
  return b2IsValid(x) && b2IsValid(y);
 }


 b2Vec2 Skew() const
 {
  return b2Vec2(-y, x);
 }

 float32 x, y;
};


struct b2Vec3
{

 b2Vec3() {}


 b2Vec3(float32 x, float32 y, float32 z) : x(x), y(y), z(z) {}


 void SetZero() { x = 0.0f; y = 0.0f; z = 0.0f; }


 void Set(float32 x_, float32 y_, float32 z_) { x = x_; y = y_; z = z_; }


 b2Vec3 operator -() const { b2Vec3 v; v.Set(-x, -y, -z); return v; }


 void operator += (const b2Vec3& v)
 {
  x += v.x; y += v.y; z += v.z;
 }


 void operator -= (const b2Vec3& v)
 {
  x -= v.x; y -= v.y; z -= v.z;
 }


 void operator *= (float32 s)
 {
  x *= s; y *= s; z *= s;
 }

 float32 x, y, z;
};


struct b2Mat22
{

 b2Mat22() {}


 b2Mat22(const b2Vec2& c1, const b2Vec2& c2)
 {
  ex = c1;
  ey = c2;
 }


 b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)
 {
  ex.x = a11; ex.y = a21;
  ey.x = a12; ey.y = a22;
 }


 void Set(const b2Vec2& c1, const b2Vec2& c2)
 {
  ex = c1;
  ey = c2;
 }


 void SetIdentity()
 {
  ex.x = 1.0f; ey.x = 0.0f;
  ex.y = 0.0f; ey.y = 1.0f;
 }


 void SetZero()
 {
  ex.x = 0.0f; ey.x = 0.0f;
  ex.y = 0.0f; ey.y = 0.0f;
 }

 b2Mat22 GetInverse() const
 {
  float32 a = ex.x, b = ey.x, c = ex.y, d = ey.y;
  b2Mat22 B;
  float32 det = a * d - b * c;
  if (det != 0.0f)
  {
   det = 1.0f / det;
  }
  B.ex.x = det * d; B.ey.x = -det * b;
  B.ex.y = -det * c; B.ey.y = det * a;
  return B;
 }



 b2Vec2 Solve(const b2Vec2& b) const
 {
  float32 a11 = ex.x, a12 = ey.x, a21 = ex.y, a22 = ey.y;
  float32 det = a11 * a22 - a12 * a21;
  if (det != 0.0f)
  {
   det = 1.0f / det;
  }
  b2Vec2 x;
  x.x = det * (a22 * b.x - a12 * b.y);
  x.y = det * (a11 * b.y - a21 * b.x);
  return x;
 }

 b2Vec2 ex, ey;
};


struct b2Mat33
{

 b2Mat33() {}


 b2Mat33(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3)
 {
  ex = c1;
  ey = c2;
  ez = c3;
 }


 void SetZero()
 {
  ex.SetZero();
  ey.SetZero();
  ez.SetZero();
 }



 b2Vec3 Solve33(const b2Vec3& b) const;




 b2Vec2 Solve22(const b2Vec2& b) const;



 void GetInverse22(b2Mat33* M) const;



 void GetSymInverse33(b2Mat33* M) const;

 b2Vec3 ex, ey, ez;
};


struct b2Rot
{
 b2Rot() {}


 explicit b2Rot(float32 angle)
 {

  s = sinf(angle);
  c = cosf(angle);
 }


 void Set(float32 angle)
 {

  s = sinf(angle);
  c = cosf(angle);
 }


 void SetIdentity()
 {
  s = 0.0f;
  c = 1.0f;
 }


 float32 GetAngle() const
 {
  return atan2f(s, c);
 }


 b2Vec2 GetXAxis() const
 {
  return b2Vec2(c, s);
 }


 b2Vec2 GetYAxis() const
 {
  return b2Vec2(-s, c);
 }


 float32 s, c;
};



struct b2Transform
{

 b2Transform() {}


 b2Transform(const b2Vec2& position, const b2Rot& rotation) : p(position), q(rotation) {}


 void SetIdentity()
 {
  p.SetZero();
  q.SetIdentity();
 }


 void Set(const b2Vec2& position, float32 angle)
 {
  p = position;
  q.Set(angle);
 }

 b2Vec2 p;
 b2Rot q;
};





struct b2Sweep
{


 void GetTransform(b2Transform* xfb, float32 beta) const;



 void Advance(float32 alpha);


 void Normalize();

 b2Vec2 localCenter;
 b2Vec2 c0, c;
 float32 a0, a;



 float32 alpha0;
};


extern const b2Vec2 b2Vec2_zero;


inline float32 b2Dot(const b2Vec2& a, const b2Vec2& b)
{
 return a.x * b.x + a.y * b.y;
}


inline float32 b2Cross(const b2Vec2& a, const b2Vec2& b)
{
 return a.x * b.y - a.y * b.x;
}



inline b2Vec2 b2Cross(const b2Vec2& a, float32 s)
{
 return b2Vec2(s * a.y, -s * a.x);
}



inline b2Vec2 b2Cross(float32 s, const b2Vec2& a)
{
 return b2Vec2(-s * a.y, s * a.x);
}



inline b2Vec2 b2Mul(const b2Mat22& A, const b2Vec2& v)
{
 return b2Vec2(A.ex.x * v.x + A.ey.x * v.y, A.ex.y * v.x + A.ey.y * v.y);
}



inline b2Vec2 b2MulT(const b2Mat22& A, const b2Vec2& v)
{
 return b2Vec2(b2Dot(v, A.ex), b2Dot(v, A.ey));
}


inline b2Vec2 operator + (const b2Vec2& a, const b2Vec2& b)
{
 return b2Vec2(a.x + b.x, a.y + b.y);
}


inline b2Vec2 operator - (const b2Vec2& a, const b2Vec2& b)
{
 return b2Vec2(a.x - b.x, a.y - b.y);
}

inline b2Vec2 operator * (float32 s, const b2Vec2& a)
{
 return b2Vec2(s * a.x, s * a.y);
}

inline bool operator == (const b2Vec2& a, const b2Vec2& b)
{
 return a.x == b.x && a.y == b.y;
}

inline float32 b2Distance(const b2Vec2& a, const b2Vec2& b)
{
 b2Vec2 c = a - b;
 return c.Length();
}

inline float32 b2DistanceSquared(const b2Vec2& a, const b2Vec2& b)
{
 b2Vec2 c = a - b;
 return b2Dot(c, c);
}

inline b2Vec3 operator * (float32 s, const b2Vec3& a)
{
 return b2Vec3(s * a.x, s * a.y, s * a.z);
}


inline b2Vec3 operator + (const b2Vec3& a, const b2Vec3& b)
{
 return b2Vec3(a.x + b.x, a.y + b.y, a.z + b.z);
}


inline b2Vec3 operator - (const b2Vec3& a, const b2Vec3& b)
{
 return b2Vec3(a.x - b.x, a.y - b.y, a.z - b.z);
}


inline float32 b2Dot(const b2Vec3& a, const b2Vec3& b)
{
 return a.x * b.x + a.y * b.y + a.z * b.z;
}


inline b2Vec3 b2Cross(const b2Vec3& a, const b2Vec3& b)
{
 return b2Vec3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
}

inline b2Mat22 operator + (const b2Mat22& A, const b2Mat22& B)
{
 return b2Mat22(A.ex + B.ex, A.ey + B.ey);
}


inline b2Mat22 b2Mul(const b2Mat22& A, const b2Mat22& B)
{
 return b2Mat22(b2Mul(A, B.ex), b2Mul(A, B.ey));
}


inline b2Mat22 b2MulT(const b2Mat22& A, const b2Mat22& B)
{
 b2Vec2 c1(b2Dot(A.ex, B.ex), b2Dot(A.ey, B.ex));
 b2Vec2 c2(b2Dot(A.ex, B.ey), b2Dot(A.ey, B.ey));
 return b2Mat22(c1, c2);
}


inline b2Vec3 b2Mul(const b2Mat33& A, const b2Vec3& v)
{
 return v.x * A.ex + v.y * A.ey + v.z * A.ez;
}


inline b2Vec2 b2Mul22(const b2Mat33& A, const b2Vec2& v)
{
 return b2Vec2(A.ex.x * v.x + A.ey.x * v.y, A.ex.y * v.x + A.ey.y * v.y);
}


inline b2Rot b2Mul(const b2Rot& q, const b2Rot& r)
{




 b2Rot qr;
 qr.s = q.s * r.c + q.c * r.s;
 qr.c = q.c * r.c - q.s * r.s;
 return qr;
}


inline b2Rot b2MulT(const b2Rot& q, const b2Rot& r)
{




 b2Rot qr;
 qr.s = q.c * r.s - q.s * r.c;
 qr.c = q.c * r.c + q.s * r.s;
 return qr;
}


inline b2Vec2 b2Mul(const b2Rot& q, const b2Vec2& v)
{
 return b2Vec2(q.c * v.x - q.s * v.y, q.s * v.x + q.c * v.y);
}


inline b2Vec2 b2MulT(const b2Rot& q, const b2Vec2& v)
{
 return b2Vec2(q.c * v.x + q.s * v.y, -q.s * v.x + q.c * v.y);
}

inline b2Vec2 b2Mul(const b2Transform& T, const b2Vec2& v)
{
 float32 x = (T.q.c * v.x - T.q.s * v.y) + T.p.x;
 float32 y = (T.q.s * v.x + T.q.c * v.y) + T.p.y;

 return b2Vec2(x, y);
}

inline b2Vec2 b2MulT(const b2Transform& T, const b2Vec2& v)
{
 float32 px = v.x - T.p.x;
 float32 py = v.y - T.p.y;
 float32 x = (T.q.c * px + T.q.s * py);
 float32 y = (-T.q.s * px + T.q.c * py);

 return b2Vec2(x, y);
}



inline b2Transform b2Mul(const b2Transform& A, const b2Transform& B)
{
 b2Transform C;
 C.q = b2Mul(A.q, B.q);
 C.p = b2Mul(A.q, B.p) + A.p;
 return C;
}



inline b2Transform b2MulT(const b2Transform& A, const b2Transform& B)
{
 b2Transform C;
 C.q = b2MulT(A.q, B.q);
 C.p = b2MulT(A.q, B.p - A.p);
 return C;
}

template <typename T>
inline T b2Abs(T a)
{
 return a > T(0) ? a : -a;
}

inline b2Vec2 b2Abs(const b2Vec2& a)
{
 return b2Vec2(b2Abs(a.x), b2Abs(a.y));
}

inline b2Mat22 b2Abs(const b2Mat22& A)
{
 return b2Mat22(b2Abs(A.ex), b2Abs(A.ey));
}

template <typename T>
inline T b2Min(T a, T b)
{
 return a < b ? a : b;
}

inline b2Vec2 b2Min(const b2Vec2& a, const b2Vec2& b)
{
 return b2Vec2(b2Min(a.x, b.x), b2Min(a.y, b.y));
}

template <typename T>
inline T b2Max(T a, T b)
{
 return a > b ? a : b;
}

inline b2Vec2 b2Max(const b2Vec2& a, const b2Vec2& b)
{
 return b2Vec2(b2Max(a.x, b.x), b2Max(a.y, b.y));
}

template <typename T>
inline T b2Clamp(T a, T low, T high)
{
 return b2Max(low, b2Min(a, high));
}

inline b2Vec2 b2Clamp(const b2Vec2& a, const b2Vec2& low, const b2Vec2& high)
{
 return b2Max(low, b2Min(a, high));
}

template<typename T> inline void b2Swap(T& a, T& b)
{
 T tmp = a;
 a = b;
 b = tmp;
}






inline uint32 b2NextPowerOfTwo(uint32 x)
{
 x |= (x >> 1);
 x |= (x >> 2);
 x |= (x >> 4);
 x |= (x >> 8);
 x |= (x >> 16);
 return x + 1;
}

inline bool b2IsPowerOfTwo(uint32 x)
{
 bool result = x > 0 && (x & (x - 1)) == 0;
 return result;
}

inline void b2Sweep::GetTransform(b2Transform* xf, float32 beta) const
{
 xf->p = (1.0f - beta) * c0 + beta * c;
 float32 angle = (1.0f - beta) * a0 + beta * a;
 xf->q.Set(angle);


 xf->p -= b2Mul(xf->q, localCenter);
}

inline void b2Sweep::Advance(float32 alpha)
{
 ((alpha0 < 1.0f) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Common/b2Math.h", 704, "alpha0 < 1.0f"));
 float32 beta = (alpha - alpha0) / (1.0f - alpha0);
 c0 += beta * (c - c0);
 a0 += beta * (a - a0);
 alpha0 = alpha;
}


inline void b2Sweep::Normalize()
{
 float32 twoPi = 2.0f * 3.14159265359f;
 float32 d = twoPi * floorf(a0 / twoPi);
 a0 -= d;
 a -= d;
}
# 23 "v:/gigglingbits/box2d/Box2D/Collision/b2Collision.h" 2
# 1 "c:/marmalade/6.3/s3e/h/std/limits.h" 1
# 24 "v:/gigglingbits/box2d/Box2D/Collision/b2Collision.h" 2





class b2Shape;
class b2CircleShape;
class b2EdgeShape;
class b2PolygonShape;

const uint8 b2_nullFeature = 255;



struct b2ContactFeature
{
 enum Type
 {
  e_vertex = 0,
  e_face = 1
 };

 uint8 indexA;
 uint8 indexB;
 uint8 typeA;
 uint8 typeB;
};


union b2ContactID
{
 b2ContactFeature cf;
 uint32 key;
};
# 69 "v:/gigglingbits/box2d/Box2D/Collision/b2Collision.h"
struct b2ManifoldPoint
{
 b2Vec2 localPoint;
 float32 normalImpulse;
 float32 tangentImpulse;
 b2ContactID id;
};
# 93 "v:/gigglingbits/box2d/Box2D/Collision/b2Collision.h"
struct b2Manifold
{
 enum Type
 {
  e_circles,
  e_faceA,
  e_faceB
 };

 b2ManifoldPoint points[2];
 b2Vec2 localNormal;
 b2Vec2 localPoint;
 Type type;
 int32 pointCount;
};


struct b2WorldManifold
{




 void Initialize(const b2Manifold* manifold,
     const b2Transform& xfA, float32 radiusA,
     const b2Transform& xfB, float32 radiusB);

 b2Vec2 normal;
 b2Vec2 points[2];
 float32 separations[2];
};


enum b2PointState
{
 b2_nullState,
 b2_addState,
 b2_persistState,
 b2_removeState
};



void b2GetPointStates(b2PointState state1[2], b2PointState state2[2],
       const b2Manifold* manifold1, const b2Manifold* manifold2);


struct b2ClipVertex
{
 b2Vec2 v;
 b2ContactID id;
};


struct b2RayCastInput
{
 b2Vec2 p1, p2;
 float32 maxFraction;
};



struct b2RayCastOutput
{
 b2Vec2 normal;
 float32 fraction;
};


struct b2AABB
{

 bool IsValid() const;


 b2Vec2 GetCenter() const
 {
  return 0.5f * (lowerBound + upperBound);
 }


 b2Vec2 GetExtents() const
 {
  return 0.5f * (upperBound - lowerBound);
 }


 float32 GetPerimeter() const
 {
  float32 wx = upperBound.x - lowerBound.x;
  float32 wy = upperBound.y - lowerBound.y;
  return 2.0f * (wx + wy);
 }


 void Combine(const b2AABB& aabb)
 {
  lowerBound = b2Min(lowerBound, aabb.lowerBound);
  upperBound = b2Max(upperBound, aabb.upperBound);
 }


 void Combine(const b2AABB& aabb1, const b2AABB& aabb2)
 {
  lowerBound = b2Min(aabb1.lowerBound, aabb2.lowerBound);
  upperBound = b2Max(aabb1.upperBound, aabb2.upperBound);
 }


 bool Contains(const b2AABB& aabb) const
 {
  bool result = true;
  result = result && lowerBound.x <= aabb.lowerBound.x;
  result = result && lowerBound.y <= aabb.lowerBound.y;
  result = result && aabb.upperBound.x <= upperBound.x;
  result = result && aabb.upperBound.y <= upperBound.y;
  return result;
 }

 bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input) const;

 b2Vec2 lowerBound;
 b2Vec2 upperBound;
};


void b2CollideCircles(b2Manifold* manifold,
       const b2CircleShape* circleA, const b2Transform& xfA,
       const b2CircleShape* circleB, const b2Transform& xfB);


void b2CollidePolygonAndCircle(b2Manifold* manifold,
          const b2PolygonShape* polygonA, const b2Transform& xfA,
          const b2CircleShape* circleB, const b2Transform& xfB);


void b2CollidePolygons(b2Manifold* manifold,
        const b2PolygonShape* polygonA, const b2Transform& xfA,
        const b2PolygonShape* polygonB, const b2Transform& xfB);


void b2CollideEdgeAndCircle(b2Manifold* manifold,
          const b2EdgeShape* polygonA, const b2Transform& xfA,
          const b2CircleShape* circleB, const b2Transform& xfB);


void b2CollideEdgeAndPolygon(b2Manifold* manifold,
          const b2EdgeShape* edgeA, const b2Transform& xfA,
          const b2PolygonShape* circleB, const b2Transform& xfB);


int32 b2ClipSegmentToLine(b2ClipVertex vOut[2], const b2ClipVertex vIn[2],
       const b2Vec2& normal, float32 offset, int32 vertexIndexA);


bool b2TestOverlap( const b2Shape* shapeA, int32 indexA,
     const b2Shape* shapeB, int32 indexB,
     const b2Transform& xfA, const b2Transform& xfB);



inline bool b2AABB::IsValid() const
{
 b2Vec2 d = upperBound - lowerBound;
 bool valid = d.x >= 0.0f && d.y >= 0.0f;
 valid = valid && lowerBound.IsValid() && upperBound.IsValid();
 return valid;
}

inline bool b2TestOverlap(const b2AABB& a, const b2AABB& b)
{
 b2Vec2 d1, d2;
 d1 = b.lowerBound - a.upperBound;
 d2 = a.lowerBound - b.upperBound;

 if (d1.x > 0.0f || d1.y > 0.0f)
  return false;

 if (d2.x > 0.0f || d2.y > 0.0f)
  return false;

 return true;
}
# 23 "v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.h" 2
# 1 "v:/gigglingbits/box2d/Box2D/Common/b2GrowableStack.h" 1
# 22 "v:/gigglingbits/box2d/Box2D/Common/b2GrowableStack.h"
# 1 "c:/marmalade/6.3/s3e/h/std/memory.h" 1
# 15 "c:/marmalade/6.3/s3e/h/std/memory.h"
# 1 "c:/marmalade/6.3/s3e/h/std/string.h" 1
# 17 "c:/marmalade/6.3/s3e/h/std/string.h"
extern "C" {

void *memcpy(void *dest, const void *src, size_t n);
void *memset(void *s, int c, size_t n);
int memcmp(const void *s1, const void *s2, size_t n);
void *memmove(void *dest, const void *src, size_t n);
void *memchr(const void *s, int c, size_t n);
void *memrchr(const void *s, int c, size_t n);
# 34 "c:/marmalade/6.3/s3e/h/std/string.h"
int strcmp(const char *s1, const char *s2);
int strncmp(const char *s1, const char *s2, size_t n);
char *strsep(char **stringp, const char *delim);
char *strcpy(char *dest, const char *src);
char *strncpy(char *dest, const char *src, size_t n);
char *strchr(const char *s, int c);
char *strstr(const char *haystack, const char *needle);
char *strrchr(const char *s, int c);
char *strdup(const char *s);
char *strtok(char *str, const char *delim);
char *strtok_r(char *str, const char *delim, char **saveptr);
char *strcat(char *dest, const char *src);
char *strncat(char *dest, const char *src, size_t n);
size_t strlen(const char *s);
size_t strnlen(const char *s, size_t n);
int strcasecmp(const char *s1, const char *s2);
int strncasecmp(const char *s1, const char *s2, size_t n);
size_t strspn(const char *s, const char *accept);
size_t strcspn(const char *s, const char *reject);
char *strpbrk(const char *s, const char *accept);
int strcoll(const char *s1, const char *s2);
char *strerror(int errnum);
size_t strxfrm(char *dest, const char *src, size_t n);

int strerror_r(int errnum, char *buf, size_t buflen);





size_t strlcpy(char* dest, const char* src, size_t len);
size_t strlcat(char* dest, const char* src, size_t len);

char* strnstr(const char *s, const char *find, size_t slen);

}
# 16 "c:/marmalade/6.3/s3e/h/std/memory.h" 2
# 23 "v:/gigglingbits/box2d/Box2D/Common/b2GrowableStack.h" 2




template <typename T, int32 N>
class b2GrowableStack
{
public:
 b2GrowableStack()
 {
  m_stack = m_array;
  m_count = 0;
  m_capacity = N;
 }

 ~b2GrowableStack()
 {
  if (m_stack != m_array)
  {
   b2Free(m_stack);
   m_stack = __null;
  }
 }

 void Push(const T& element)
 {
  if (m_count == m_capacity)
  {
   T* old = m_stack;
   m_capacity *= 2;
   m_stack = (T*)b2Alloc(m_capacity * sizeof(T));
   memcpy(m_stack, old, m_count * sizeof(T));
   if (old != m_array)
   {
    b2Free(old);
   }
  }

  m_stack[m_count] = element;
  ++m_count;
 }

 T Pop()
 {
  ((m_count > 0) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Common/b2GrowableStack.h", 67, "m_count > 0"));
  --m_count;
  return m_stack[m_count];
 }

 int32 GetCount()
 {
  return m_count;
 }

private:
 T* m_stack;
 T m_array[N];
 int32 m_count;
 int32 m_capacity;
};
# 24 "v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.h" 2




struct b2TreeNode
{
 bool IsLeaf() const
 {
  return child1 == (-1);
 }


 b2AABB aabb;

 void* userData;

 union
 {
  int32 parent;
  int32 next;
 };

 int32 child1;
 int32 child2;


 int32 height;
};
# 61 "v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.h"
class b2DynamicTree
{
public:

 b2DynamicTree();


 ~b2DynamicTree();


 int32 CreateProxy(const b2AABB& aabb, void* userData);


 void DestroyProxy(int32 proxyId);





 bool MoveProxy(int32 proxyId, const b2AABB& aabb1, const b2Vec2& displacement);



 void* GetUserData(int32 proxyId) const;


 const b2AABB& GetFatAABB(int32 proxyId) const;



 template <typename T>
 void Query(T* callback, const b2AABB& aabb) const;
# 101 "v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.h"
 template <typename T>
 void RayCast(T* callback, const b2RayCastInput& input) const;


 void Validate() const;



 int32 GetHeight() const;



 int32 GetMaxBalance() const;


 float32 GetAreaRatio() const;


 void RebuildBottomUp();




 void ShiftOrigin(const b2Vec2& newOrigin);

private:

 int32 AllocateNode();
 void FreeNode(int32 node);

 void InsertLeaf(int32 node);
 void RemoveLeaf(int32 node);

 int32 Balance(int32 index);

 int32 ComputeHeight() const;
 int32 ComputeHeight(int32 nodeId) const;

 void ValidateStructure(int32 index) const;
 void ValidateMetrics(int32 index) const;

 int32 m_root;

 b2TreeNode* m_nodes;
 int32 m_nodeCount;
 int32 m_nodeCapacity;

 int32 m_freeList;


 uint32 m_path;

 int32 m_insertionCount;
};

inline void* b2DynamicTree::GetUserData(int32 proxyId) const
{
 ((0 <= proxyId && proxyId < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.h", 158, "0 <= proxyId && proxyId < m_nodeCapacity"));
 return m_nodes[proxyId].userData;
}

inline const b2AABB& b2DynamicTree::GetFatAABB(int32 proxyId) const
{
 ((0 <= proxyId && proxyId < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.h", 164, "0 <= proxyId && proxyId < m_nodeCapacity"));
 return m_nodes[proxyId].aabb;
}

template <typename T>
inline void b2DynamicTree::Query(T* callback, const b2AABB& aabb) const
{
 b2GrowableStack<int32, 256> stack;
 stack.Push(m_root);

 while (stack.GetCount() > 0)
 {
  int32 nodeId = stack.Pop();
  if (nodeId == (-1))
  {
   continue;
  }

  const b2TreeNode* node = m_nodes + nodeId;

  if (b2TestOverlap(node->aabb, aabb))
  {
   if (node->IsLeaf())
   {
    bool proceed = callback->QueryCallback(nodeId);
    if (proceed == false)
    {
     return;
    }
   }
   else
   {
    stack.Push(node->child1);
    stack.Push(node->child2);
   }
  }
 }
}

template <typename T>
inline void b2DynamicTree::RayCast(T* callback, const b2RayCastInput& input) const
{
 b2Vec2 p1 = input.p1;
 b2Vec2 p2 = input.p2;
 b2Vec2 r = p2 - p1;
 ((r.LengthSquared() > 0.0f) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.h", 209, "r.LengthSquared() > 0.0f"));
 r.Normalize();


 b2Vec2 v = b2Cross(1.0f, r);
 b2Vec2 abs_v = b2Abs(v);




 float32 maxFraction = input.maxFraction;


 b2AABB segmentAABB;
 {
  b2Vec2 t = p1 + maxFraction * (p2 - p1);
  segmentAABB.lowerBound = b2Min(p1, t);
  segmentAABB.upperBound = b2Max(p1, t);
 }

 b2GrowableStack<int32, 256> stack;
 stack.Push(m_root);

 while (stack.GetCount() > 0)
 {
  int32 nodeId = stack.Pop();
  if (nodeId == (-1))
  {
   continue;
  }

  const b2TreeNode* node = m_nodes + nodeId;

  if (b2TestOverlap(node->aabb, segmentAABB) == false)
  {
   continue;
  }



  b2Vec2 c = node->aabb.GetCenter();
  b2Vec2 h = node->aabb.GetExtents();
  float32 separation = b2Abs(b2Dot(v, p1 - c)) - b2Dot(abs_v, h);
  if (separation > 0.0f)
  {
   continue;
  }

  if (node->IsLeaf())
  {
   b2RayCastInput subInput;
   subInput.p1 = input.p1;
   subInput.p2 = input.p2;
   subInput.maxFraction = maxFraction;

   float32 value = callback->RayCastCallback(subInput, nodeId);

   if (value == 0.0f)
   {

    return;
   }

   if (value > 0.0f)
   {

    maxFraction = value;
    b2Vec2 t = p1 + maxFraction * (p2 - p1);
    segmentAABB.lowerBound = b2Min(p1, t);
    segmentAABB.upperBound = b2Max(p1, t);
   }
  }
  else
  {
   stack.Push(node->child1);
   stack.Push(node->child2);
  }
 }
}
# 20 "v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp" 2


b2DynamicTree::b2DynamicTree()
{
 m_root = (-1);

 m_nodeCapacity = 16;
 m_nodeCount = 0;
 m_nodes = (b2TreeNode*)b2Alloc(m_nodeCapacity * sizeof(b2TreeNode));
 memset(m_nodes, 0, m_nodeCapacity * sizeof(b2TreeNode));


 for (int32 i = 0; i < m_nodeCapacity - 1; ++i)
 {
  m_nodes[i].next = i + 1;
  m_nodes[i].height = -1;
 }
 m_nodes[m_nodeCapacity-1].next = (-1);
 m_nodes[m_nodeCapacity-1].height = -1;
 m_freeList = 0;

 m_path = 0;

 m_insertionCount = 0;
}

b2DynamicTree::~b2DynamicTree()
{

 b2Free(m_nodes);
}


int32 b2DynamicTree::AllocateNode()
{

 if (m_freeList == (-1))
 {
  ((m_nodeCount == m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 58, "m_nodeCount == m_nodeCapacity"));


  b2TreeNode* oldNodes = m_nodes;
  m_nodeCapacity *= 2;
  m_nodes = (b2TreeNode*)b2Alloc(m_nodeCapacity * sizeof(b2TreeNode));
  memcpy(m_nodes, oldNodes, m_nodeCount * sizeof(b2TreeNode));
  b2Free(oldNodes);



  for (int32 i = m_nodeCount; i < m_nodeCapacity - 1; ++i)
  {
   m_nodes[i].next = i + 1;
   m_nodes[i].height = -1;
  }
  m_nodes[m_nodeCapacity-1].next = (-1);
  m_nodes[m_nodeCapacity-1].height = -1;
  m_freeList = m_nodeCount;
 }


 int32 nodeId = m_freeList;
 m_freeList = m_nodes[nodeId].next;
 m_nodes[nodeId].parent = (-1);
 m_nodes[nodeId].child1 = (-1);
 m_nodes[nodeId].child2 = (-1);
 m_nodes[nodeId].height = 0;
 m_nodes[nodeId].userData = __null;
 ++m_nodeCount;
 return nodeId;
}


void b2DynamicTree::FreeNode(int32 nodeId)
{
 ((0 <= nodeId && nodeId < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 94, "0 <= nodeId && nodeId < m_nodeCapacity"));
 ((0 < m_nodeCount) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 95, "0 < m_nodeCount"));
 m_nodes[nodeId].next = m_freeList;
 m_nodes[nodeId].height = -1;
 m_freeList = nodeId;
 --m_nodeCount;
}




int32 b2DynamicTree::CreateProxy(const b2AABB& aabb, void* userData)
{
 int32 proxyId = AllocateNode();


 b2Vec2 r(0.1f, 0.1f);
 m_nodes[proxyId].aabb.lowerBound = aabb.lowerBound - r;
 m_nodes[proxyId].aabb.upperBound = aabb.upperBound + r;
 m_nodes[proxyId].userData = userData;
 m_nodes[proxyId].height = 0;

 InsertLeaf(proxyId);

 return proxyId;
}

void b2DynamicTree::DestroyProxy(int32 proxyId)
{
 ((0 <= proxyId && proxyId < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 123, "0 <= proxyId && proxyId < m_nodeCapacity"));
 ((m_nodes[proxyId].IsLeaf()) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 124, "m_nodes[proxyId].IsLeaf()"));

 RemoveLeaf(proxyId);
 FreeNode(proxyId);
}

bool b2DynamicTree::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)
{
 ((0 <= proxyId && proxyId < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 132, "0 <= proxyId && proxyId < m_nodeCapacity"));

 ((m_nodes[proxyId].IsLeaf()) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 134, "m_nodes[proxyId].IsLeaf()"));

 if (m_nodes[proxyId].aabb.Contains(aabb))
 {
  return false;
 }

 RemoveLeaf(proxyId);


 b2AABB b = aabb;
 b2Vec2 r(0.1f, 0.1f);
 b.lowerBound = b.lowerBound - r;
 b.upperBound = b.upperBound + r;


 b2Vec2 d = 2.0f * displacement;

 if (d.x < 0.0f)
 {
  b.lowerBound.x += d.x;
 }
 else
 {
  b.upperBound.x += d.x;
 }

 if (d.y < 0.0f)
 {
  b.lowerBound.y += d.y;
 }
 else
 {
  b.upperBound.y += d.y;
 }

 m_nodes[proxyId].aabb = b;

 InsertLeaf(proxyId);
 return true;
}

void b2DynamicTree::InsertLeaf(int32 leaf)
{
 ++m_insertionCount;

 if (m_root == (-1))
 {
  m_root = leaf;
  m_nodes[m_root].parent = (-1);
  return;
 }


 b2AABB leafAABB = m_nodes[leaf].aabb;
 int32 index = m_root;
 while (m_nodes[index].IsLeaf() == false)
 {
  int32 child1 = m_nodes[index].child1;
  int32 child2 = m_nodes[index].child2;

  float32 area = m_nodes[index].aabb.GetPerimeter();

  b2AABB combinedAABB;
  combinedAABB.Combine(m_nodes[index].aabb, leafAABB);
  float32 combinedArea = combinedAABB.GetPerimeter();


  float32 cost = 2.0f * combinedArea;


  float32 inheritanceCost = 2.0f * (combinedArea - area);


  float32 cost1;
  if (m_nodes[child1].IsLeaf())
  {
   b2AABB aabb;
   aabb.Combine(leafAABB, m_nodes[child1].aabb);
   cost1 = aabb.GetPerimeter() + inheritanceCost;
  }
  else
  {
   b2AABB aabb;
   aabb.Combine(leafAABB, m_nodes[child1].aabb);
   float32 oldArea = m_nodes[child1].aabb.GetPerimeter();
   float32 newArea = aabb.GetPerimeter();
   cost1 = (newArea - oldArea) + inheritanceCost;
  }


  float32 cost2;
  if (m_nodes[child2].IsLeaf())
  {
   b2AABB aabb;
   aabb.Combine(leafAABB, m_nodes[child2].aabb);
   cost2 = aabb.GetPerimeter() + inheritanceCost;
  }
  else
  {
   b2AABB aabb;
   aabb.Combine(leafAABB, m_nodes[child2].aabb);
   float32 oldArea = m_nodes[child2].aabb.GetPerimeter();
   float32 newArea = aabb.GetPerimeter();
   cost2 = newArea - oldArea + inheritanceCost;
  }


  if (cost < cost1 && cost < cost2)
  {
   break;
  }


  if (cost1 < cost2)
  {
   index = child1;
  }
  else
  {
   index = child2;
  }
 }

 int32 sibling = index;


 int32 oldParent = m_nodes[sibling].parent;
 int32 newParent = AllocateNode();
 m_nodes[newParent].parent = oldParent;
 m_nodes[newParent].userData = __null;
 m_nodes[newParent].aabb.Combine(leafAABB, m_nodes[sibling].aabb);
 m_nodes[newParent].height = m_nodes[sibling].height + 1;

 if (oldParent != (-1))
 {

  if (m_nodes[oldParent].child1 == sibling)
  {
   m_nodes[oldParent].child1 = newParent;
  }
  else
  {
   m_nodes[oldParent].child2 = newParent;
  }

  m_nodes[newParent].child1 = sibling;
  m_nodes[newParent].child2 = leaf;
  m_nodes[sibling].parent = newParent;
  m_nodes[leaf].parent = newParent;
 }
 else
 {

  m_nodes[newParent].child1 = sibling;
  m_nodes[newParent].child2 = leaf;
  m_nodes[sibling].parent = newParent;
  m_nodes[leaf].parent = newParent;
  m_root = newParent;
 }


 index = m_nodes[leaf].parent;
 while (index != (-1))
 {
  index = Balance(index);

  int32 child1 = m_nodes[index].child1;
  int32 child2 = m_nodes[index].child2;

  ((child1 != (-1)) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 304, "child1 != (-1)"));
  ((child2 != (-1)) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 305, "child2 != (-1)"));

  m_nodes[index].height = 1 + b2Max(m_nodes[child1].height, m_nodes[child2].height);
  m_nodes[index].aabb.Combine(m_nodes[child1].aabb, m_nodes[child2].aabb);

  index = m_nodes[index].parent;
 }


}

void b2DynamicTree::RemoveLeaf(int32 leaf)
{
 if (leaf == m_root)
 {
  m_root = (-1);
  return;
 }

 int32 parent = m_nodes[leaf].parent;
 int32 grandParent = m_nodes[parent].parent;
 int32 sibling;
 if (m_nodes[parent].child1 == leaf)
 {
  sibling = m_nodes[parent].child2;
 }
 else
 {
  sibling = m_nodes[parent].child1;
 }

 if (grandParent != (-1))
 {

  if (m_nodes[grandParent].child1 == parent)
  {
   m_nodes[grandParent].child1 = sibling;
  }
  else
  {
   m_nodes[grandParent].child2 = sibling;
  }
  m_nodes[sibling].parent = grandParent;
  FreeNode(parent);


  int32 index = grandParent;
  while (index != (-1))
  {
   index = Balance(index);

   int32 child1 = m_nodes[index].child1;
   int32 child2 = m_nodes[index].child2;

   m_nodes[index].aabb.Combine(m_nodes[child1].aabb, m_nodes[child2].aabb);
   m_nodes[index].height = 1 + b2Max(m_nodes[child1].height, m_nodes[child2].height);

   index = m_nodes[index].parent;
  }
 }
 else
 {
  m_root = sibling;
  m_nodes[sibling].parent = (-1);
  FreeNode(parent);
 }


}



int32 b2DynamicTree::Balance(int32 iA)
{
 ((iA != (-1)) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 379, "iA != (-1)"));

 b2TreeNode* A = m_nodes + iA;
 if (A->IsLeaf() || A->height < 2)
 {
  return iA;
 }

 int32 iB = A->child1;
 int32 iC = A->child2;
 ((0 <= iB && iB < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 389, "0 <= iB && iB < m_nodeCapacity"));
 ((0 <= iC && iC < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 390, "0 <= iC && iC < m_nodeCapacity"));

 b2TreeNode* B = m_nodes + iB;
 b2TreeNode* C = m_nodes + iC;

 int32 balance = C->height - B->height;


 if (balance > 1)
 {
  int32 iF = C->child1;
  int32 iG = C->child2;
  b2TreeNode* F = m_nodes + iF;
  b2TreeNode* G = m_nodes + iG;
  ((0 <= iF && iF < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 404, "0 <= iF && iF < m_nodeCapacity"));
  ((0 <= iG && iG < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 405, "0 <= iG && iG < m_nodeCapacity"));


  C->child1 = iA;
  C->parent = A->parent;
  A->parent = iC;


  if (C->parent != (-1))
  {
   if (m_nodes[C->parent].child1 == iA)
   {
    m_nodes[C->parent].child1 = iC;
   }
   else
   {
    ((m_nodes[C->parent].child2 == iA) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 421, "m_nodes[C->parent].child2 == iA"));
    m_nodes[C->parent].child2 = iC;
   }
  }
  else
  {
   m_root = iC;
  }


  if (F->height > G->height)
  {
   C->child2 = iF;
   A->child2 = iG;
   G->parent = iA;
   A->aabb.Combine(B->aabb, G->aabb);
   C->aabb.Combine(A->aabb, F->aabb);

   A->height = 1 + b2Max(B->height, G->height);
   C->height = 1 + b2Max(A->height, F->height);
  }
  else
  {
   C->child2 = iG;
   A->child2 = iF;
   F->parent = iA;
   A->aabb.Combine(B->aabb, F->aabb);
   C->aabb.Combine(A->aabb, G->aabb);

   A->height = 1 + b2Max(B->height, F->height);
   C->height = 1 + b2Max(A->height, G->height);
  }

  return iC;
 }


 if (balance < -1)
 {
  int32 iD = B->child1;
  int32 iE = B->child2;
  b2TreeNode* D = m_nodes + iD;
  b2TreeNode* E = m_nodes + iE;
  ((0 <= iD && iD < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 464, "0 <= iD && iD < m_nodeCapacity"));
  ((0 <= iE && iE < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 465, "0 <= iE && iE < m_nodeCapacity"));


  B->child1 = iA;
  B->parent = A->parent;
  A->parent = iB;


  if (B->parent != (-1))
  {
   if (m_nodes[B->parent].child1 == iA)
   {
    m_nodes[B->parent].child1 = iB;
   }
   else
   {
    ((m_nodes[B->parent].child2 == iA) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 481, "m_nodes[B->parent].child2 == iA"));
    m_nodes[B->parent].child2 = iB;
   }
  }
  else
  {
   m_root = iB;
  }


  if (D->height > E->height)
  {
   B->child2 = iD;
   A->child1 = iE;
   E->parent = iA;
   A->aabb.Combine(C->aabb, E->aabb);
   B->aabb.Combine(A->aabb, D->aabb);

   A->height = 1 + b2Max(C->height, E->height);
   B->height = 1 + b2Max(A->height, D->height);
  }
  else
  {
   B->child2 = iE;
   A->child1 = iD;
   D->parent = iA;
   A->aabb.Combine(C->aabb, D->aabb);
   B->aabb.Combine(A->aabb, E->aabb);

   A->height = 1 + b2Max(C->height, D->height);
   B->height = 1 + b2Max(A->height, E->height);
  }

  return iB;
 }

 return iA;
}

int32 b2DynamicTree::GetHeight() const
{
 if (m_root == (-1))
 {
  return 0;
 }

 return m_nodes[m_root].height;
}


float32 b2DynamicTree::GetAreaRatio() const
{
 if (m_root == (-1))
 {
  return 0.0f;
 }

 const b2TreeNode* root = m_nodes + m_root;
 float32 rootArea = root->aabb.GetPerimeter();

 float32 totalArea = 0.0f;
 for (int32 i = 0; i < m_nodeCapacity; ++i)
 {
  const b2TreeNode* node = m_nodes + i;
  if (node->height < 0)
  {

   continue;
  }

  totalArea += node->aabb.GetPerimeter();
 }

 return totalArea / rootArea;
}


int32 b2DynamicTree::ComputeHeight(int32 nodeId) const
{
 ((0 <= nodeId && nodeId < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 560, "0 <= nodeId && nodeId < m_nodeCapacity"));
 b2TreeNode* node = m_nodes + nodeId;

 if (node->IsLeaf())
 {
  return 0;
 }

 int32 height1 = ComputeHeight(node->child1);
 int32 height2 = ComputeHeight(node->child2);
 return 1 + b2Max(height1, height2);
}

int32 b2DynamicTree::ComputeHeight() const
{
 int32 height = ComputeHeight(m_root);
 return height;
}

void b2DynamicTree::ValidateStructure(int32 index) const
{
 if (index == (-1))
 {
  return;
 }

 if (index == m_root)
 {
  ((m_nodes[index].parent == (-1)) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 588, "m_nodes[index].parent == (-1)"));
 }

 const b2TreeNode* node = m_nodes + index;

 int32 child1 = node->child1;
 int32 child2 = node->child2;

 if (node->IsLeaf())
 {
  ((child1 == (-1)) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 598, "child1 == (-1)"));
  ((child2 == (-1)) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 599, "child2 == (-1)"));
  ((node->height == 0) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 600, "node->height == 0"));
  return;
 }

 ((0 <= child1 && child1 < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 604, "0 <= child1 && child1 < m_nodeCapacity"));
 ((0 <= child2 && child2 < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 605, "0 <= child2 && child2 < m_nodeCapacity"));

 ((m_nodes[child1].parent == index) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 607, "m_nodes[child1].parent == index"));
 ((m_nodes[child2].parent == index) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 608, "m_nodes[child2].parent == index"));

 ValidateStructure(child1);
 ValidateStructure(child2);
}

void b2DynamicTree::ValidateMetrics(int32 index) const
{
 if (index == (-1))
 {
  return;
 }

 const b2TreeNode* node = m_nodes + index;

 int32 child1 = node->child1;
 int32 child2 = node->child2;

 if (node->IsLeaf())
 {
  ((child1 == (-1)) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 628, "child1 == (-1)"));
  ((child2 == (-1)) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 629, "child2 == (-1)"));
  ((node->height == 0) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 630, "node->height == 0"));
  return;
 }

 ((0 <= child1 && child1 < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 634, "0 <= child1 && child1 < m_nodeCapacity"));
 ((0 <= child2 && child2 < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 635, "0 <= child2 && child2 < m_nodeCapacity"));

 int32 height1 = m_nodes[child1].height;
 int32 height2 = m_nodes[child2].height;
 int32 height;
 height = 1 + b2Max(height1, height2);
 ((node->height == height) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 641, "node->height == height"));

 b2AABB aabb;
 aabb.Combine(m_nodes[child1].aabb, m_nodes[child2].aabb);

 ((aabb.lowerBound == node->aabb.lowerBound) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 646, "aabb.lowerBound == node->aabb.lowerBound"));
 ((aabb.upperBound == node->aabb.upperBound) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 647, "aabb.upperBound == node->aabb.upperBound"));

 ValidateMetrics(child1);
 ValidateMetrics(child2);
}

void b2DynamicTree::Validate() const
{
 ValidateStructure(m_root);
 ValidateMetrics(m_root);

 int32 freeCount = 0;
 int32 freeIndex = m_freeList;
 while (freeIndex != (-1))
 {
  ((0 <= freeIndex && freeIndex < m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 662, "0 <= freeIndex && freeIndex < m_nodeCapacity"));
  freeIndex = m_nodes[freeIndex].next;
  ++freeCount;
 }

 ((GetHeight() == ComputeHeight()) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 667, "GetHeight() == ComputeHeight()"));

 ((m_nodeCount + freeCount == m_nodeCapacity) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 669, "m_nodeCount + freeCount == m_nodeCapacity"));
}

int32 b2DynamicTree::GetMaxBalance() const
{
 int32 maxBalance = 0;
 for (int32 i = 0; i < m_nodeCapacity; ++i)
 {
  const b2TreeNode* node = m_nodes + i;
  if (node->height <= 1)
  {
   continue;
  }

  ((node->IsLeaf() == false) ? ((void)0) : __assert("v:/gigglingbits/box2d/Box2D/Collision/b2DynamicTree.cpp", 683, "node->IsLeaf() == false"));

  int32 child1 = node->child1;
  int32 child2 = node->child2;
  int32 balance = b2Abs(m_nodes[child2].height - m_nodes[child1].height);
  maxBalance = b2Max(maxBalance, balance);
 }

 return maxBalance;
}

void b2DynamicTree::RebuildBottomUp()
{
 int32* nodes = (int32*)b2Alloc(m_nodeCount * sizeof(int32));
 int32 count = 0;


 for (int32 i = 0; i < m_nodeCapacity; ++i)
 {
  if (m_nodes[i].height < 0)
  {

   continue;
  }

  if (m_nodes[i].IsLeaf())
  {
   m_nodes[i].parent = (-1);
   nodes[count] = i;
   ++count;
  }
  else
  {
   FreeNode(i);
  }
 }

 while (count > 1)
 {
  float32 minCost = 3.402823466e+38F;
  int32 iMin = -1, jMin = -1;
  for (int32 i = 0; i < count; ++i)
  {
   b2AABB aabbi = m_nodes[nodes[i]].aabb;

   for (int32 j = i + 1; j < count; ++j)
   {
    b2AABB aabbj = m_nodes[nodes[j]].aabb;
    b2AABB b;
    b.Combine(aabbi, aabbj);
    float32 cost = b.GetPerimeter();
    if (cost < minCost)
    {
     iMin = i;
     jMin = j;
     minCost = cost;
    }
   }
  }

  int32 index1 = nodes[iMin];
  int32 index2 = nodes[jMin];
  b2TreeNode* child1 = m_nodes + index1;
  b2TreeNode* child2 = m_nodes + index2;

  int32 parentIndex = AllocateNode();
  b2TreeNode* parent = m_nodes + parentIndex;
  parent->child1 = index1;
  parent->child2 = index2;
  parent->height = 1 + b2Max(child1->height, child2->height);
  parent->aabb.Combine(child1->aabb, child2->aabb);
  parent->parent = (-1);

  child1->parent = parentIndex;
  child2->parent = parentIndex;

  nodes[jMin] = nodes[count-1];
  nodes[iMin] = parentIndex;
  --count;
 }

 m_root = nodes[0];
 b2Free(nodes);

 Validate();
}

void b2DynamicTree::ShiftOrigin(const b2Vec2& newOrigin)
{

 for (int32 i = 0; i < m_nodeCapacity; ++i)
 {
  m_nodes[i].aabb.lowerBound -= newOrigin;
  m_nodes[i].aabb.upperBound -= newOrigin;
 }
}
